schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AffiliateRewardUpdate {
  id: ID!
  affiliate: String!
  marketAddress: String!
  tokenAddress: String!
  delta: BigInt!
  nextValue: BigInt!
  nextPoolValue: BigInt!
  transaction: Transaction!
}

input AffiliateRewardUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  delta: BigInt
  delta_not: BigInt
  delta_gt: BigInt
  delta_lt: BigInt
  delta_gte: BigInt
  delta_lte: BigInt
  delta_in: [BigInt!]
  delta_not_in: [BigInt!]
  nextValue: BigInt
  nextValue_not: BigInt
  nextValue_gt: BigInt
  nextValue_lt: BigInt
  nextValue_gte: BigInt
  nextValue_lte: BigInt
  nextValue_in: [BigInt!]
  nextValue_not_in: [BigInt!]
  nextPoolValue: BigInt
  nextPoolValue_not: BigInt
  nextPoolValue_gt: BigInt
  nextPoolValue_lt: BigInt
  nextPoolValue_gte: BigInt
  nextPoolValue_lte: BigInt
  nextPoolValue_in: [BigInt!]
  nextPoolValue_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AffiliateRewardUpdate_filter]
  or: [AffiliateRewardUpdate_filter]
}

enum AffiliateRewardUpdate_orderBy {
  id
  affiliate
  marketAddress
  tokenAddress
  delta
  nextValue
  nextPoolValue
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ClaimAction {
  id: ID!
  eventName: ClaimActionType!
  account: String!
  marketAddresses: [String!]!
  tokenAddresses: [String!]!
  amounts: [BigInt!]!
  isLongOrders: [Boolean!]!
  transaction: Transaction!
}

enum ClaimActionType {
  ClaimPriceImpact
  ClaimFunding
  SettleFundingFeeCreated
  SettleFundingFeeExecuted
  SettleFundingFeeCancelled
}

input ClaimAction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  eventName: ClaimActionType
  eventName_not: ClaimActionType
  eventName_in: [ClaimActionType!]
  eventName_not_in: [ClaimActionType!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddresses: [String!]
  marketAddresses_not: [String!]
  marketAddresses_contains: [String!]
  marketAddresses_contains_nocase: [String!]
  marketAddresses_not_contains: [String!]
  marketAddresses_not_contains_nocase: [String!]
  tokenAddresses: [String!]
  tokenAddresses_not: [String!]
  tokenAddresses_contains: [String!]
  tokenAddresses_contains_nocase: [String!]
  tokenAddresses_not_contains: [String!]
  tokenAddresses_not_contains_nocase: [String!]
  amounts: [BigInt!]
  amounts_not: [BigInt!]
  amounts_contains: [BigInt!]
  amounts_contains_nocase: [BigInt!]
  amounts_not_contains: [BigInt!]
  amounts_not_contains_nocase: [BigInt!]
  isLongOrders: [Boolean!]
  isLongOrders_not: [Boolean!]
  isLongOrders_contains: [Boolean!]
  isLongOrders_contains_nocase: [Boolean!]
  isLongOrders_not_contains: [Boolean!]
  isLongOrders_not_contains_nocase: [Boolean!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimAction_filter]
  or: [ClaimAction_filter]
}

enum ClaimAction_orderBy {
  id
  eventName
  account
  marketAddresses
  tokenAddresses
  amounts
  isLongOrders
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type ClaimCollateralAction {
  id: ID!
  eventName: ClaimActionType!
  account: String!
  marketAddresses: [String!]!
  tokenAddresses: [String!]!
  amounts: [BigInt!]!
  transaction: Transaction!
}

input ClaimCollateralAction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  eventName: ClaimActionType
  eventName_not: ClaimActionType
  eventName_in: [ClaimActionType!]
  eventName_not_in: [ClaimActionType!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddresses: [String!]
  marketAddresses_not: [String!]
  marketAddresses_contains: [String!]
  marketAddresses_contains_nocase: [String!]
  marketAddresses_not_contains: [String!]
  marketAddresses_not_contains_nocase: [String!]
  tokenAddresses: [String!]
  tokenAddresses_not: [String!]
  tokenAddresses_contains: [String!]
  tokenAddresses_contains_nocase: [String!]
  tokenAddresses_not_contains: [String!]
  tokenAddresses_not_contains_nocase: [String!]
  amounts: [BigInt!]
  amounts_not: [BigInt!]
  amounts_contains: [BigInt!]
  amounts_contains_nocase: [BigInt!]
  amounts_not_contains: [BigInt!]
  amounts_not_contains_nocase: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimCollateralAction_filter]
  or: [ClaimCollateralAction_filter]
}

enum ClaimCollateralAction_orderBy {
  id
  eventName
  account
  marketAddresses
  tokenAddresses
  amounts
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type ClaimRef {
  id: ID!
}

input ClaimRef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimRef_filter]
  or: [ClaimRef_filter]
}

enum ClaimRef_orderBy {
  id
}

type ClaimableFundingFeeInfo {
  id: ID!
  marketAddresses: [String!]!
  tokenAddresses: [String!]!
  amounts: [BigInt!]!
}

input ClaimableFundingFeeInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketAddresses: [String!]
  marketAddresses_not: [String!]
  marketAddresses_contains: [String!]
  marketAddresses_contains_nocase: [String!]
  marketAddresses_not_contains: [String!]
  marketAddresses_not_contains_nocase: [String!]
  tokenAddresses: [String!]
  tokenAddresses_not: [String!]
  tokenAddresses_contains: [String!]
  tokenAddresses_contains_nocase: [String!]
  tokenAddresses_not_contains: [String!]
  tokenAddresses_not_contains_nocase: [String!]
  amounts: [BigInt!]
  amounts_not: [BigInt!]
  amounts_contains: [BigInt!]
  amounts_contains_nocase: [BigInt!]
  amounts_not_contains: [BigInt!]
  amounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimableFundingFeeInfo_filter]
  or: [ClaimableFundingFeeInfo_filter]
}

enum ClaimableFundingFeeInfo_orderBy {
  id
  marketAddresses
  tokenAddresses
  amounts
}

type CollectedMarketFeesInfo {
  id: ID!
  period: String!
  marketAddress: String!
  feeUsdForPool: BigInt!
  cummulativeFeeUsdForPool: BigInt!
  feeUsdPerPoolValue: BigInt!
  cumulativeFeeUsdPerPoolValue: BigInt!
  feeUsdPerGmToken: BigInt!
  cumulativeFeeUsdPerGmToken: BigInt!
  prevCumulativeFeeUsdPerGmToken: BigInt!
  timestampGroup: Int!
}

input CollectedMarketFeesInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  feeUsdForPool: BigInt
  feeUsdForPool_not: BigInt
  feeUsdForPool_gt: BigInt
  feeUsdForPool_lt: BigInt
  feeUsdForPool_gte: BigInt
  feeUsdForPool_lte: BigInt
  feeUsdForPool_in: [BigInt!]
  feeUsdForPool_not_in: [BigInt!]
  cummulativeFeeUsdForPool: BigInt
  cummulativeFeeUsdForPool_not: BigInt
  cummulativeFeeUsdForPool_gt: BigInt
  cummulativeFeeUsdForPool_lt: BigInt
  cummulativeFeeUsdForPool_gte: BigInt
  cummulativeFeeUsdForPool_lte: BigInt
  cummulativeFeeUsdForPool_in: [BigInt!]
  cummulativeFeeUsdForPool_not_in: [BigInt!]
  feeUsdPerPoolValue: BigInt
  feeUsdPerPoolValue_not: BigInt
  feeUsdPerPoolValue_gt: BigInt
  feeUsdPerPoolValue_lt: BigInt
  feeUsdPerPoolValue_gte: BigInt
  feeUsdPerPoolValue_lte: BigInt
  feeUsdPerPoolValue_in: [BigInt!]
  feeUsdPerPoolValue_not_in: [BigInt!]
  cumulativeFeeUsdPerPoolValue: BigInt
  cumulativeFeeUsdPerPoolValue_not: BigInt
  cumulativeFeeUsdPerPoolValue_gt: BigInt
  cumulativeFeeUsdPerPoolValue_lt: BigInt
  cumulativeFeeUsdPerPoolValue_gte: BigInt
  cumulativeFeeUsdPerPoolValue_lte: BigInt
  cumulativeFeeUsdPerPoolValue_in: [BigInt!]
  cumulativeFeeUsdPerPoolValue_not_in: [BigInt!]
  feeUsdPerGmToken: BigInt
  feeUsdPerGmToken_not: BigInt
  feeUsdPerGmToken_gt: BigInt
  feeUsdPerGmToken_lt: BigInt
  feeUsdPerGmToken_gte: BigInt
  feeUsdPerGmToken_lte: BigInt
  feeUsdPerGmToken_in: [BigInt!]
  feeUsdPerGmToken_not_in: [BigInt!]
  cumulativeFeeUsdPerGmToken: BigInt
  cumulativeFeeUsdPerGmToken_not: BigInt
  cumulativeFeeUsdPerGmToken_gt: BigInt
  cumulativeFeeUsdPerGmToken_lt: BigInt
  cumulativeFeeUsdPerGmToken_gte: BigInt
  cumulativeFeeUsdPerGmToken_lte: BigInt
  cumulativeFeeUsdPerGmToken_in: [BigInt!]
  cumulativeFeeUsdPerGmToken_not_in: [BigInt!]
  prevCumulativeFeeUsdPerGmToken: BigInt
  prevCumulativeFeeUsdPerGmToken_not: BigInt
  prevCumulativeFeeUsdPerGmToken_gt: BigInt
  prevCumulativeFeeUsdPerGmToken_lt: BigInt
  prevCumulativeFeeUsdPerGmToken_gte: BigInt
  prevCumulativeFeeUsdPerGmToken_lte: BigInt
  prevCumulativeFeeUsdPerGmToken_in: [BigInt!]
  prevCumulativeFeeUsdPerGmToken_not_in: [BigInt!]
  timestampGroup: Int
  timestampGroup_not: Int
  timestampGroup_gt: Int
  timestampGroup_lt: Int
  timestampGroup_gte: Int
  timestampGroup_lte: Int
  timestampGroup_in: [Int!]
  timestampGroup_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CollectedMarketFeesInfo_filter]
  or: [CollectedMarketFeesInfo_filter]
}

enum CollectedMarketFeesInfo_orderBy {
  id
  period
  marketAddress
  feeUsdForPool
  cummulativeFeeUsdForPool
  feeUsdPerPoolValue
  cumulativeFeeUsdPerPoolValue
  feeUsdPerGmToken
  cumulativeFeeUsdPerGmToken
  prevCumulativeFeeUsdPerGmToken
  timestampGroup
}

type DepositRef {
  id: ID!
  marketAddress: String!
  account: String!
}

input DepositRef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DepositRef_filter]
  or: [DepositRef_filter]
}

enum DepositRef_orderBy {
  id
  marketAddress
  account
}

type Distribution {
  id: ID!
  receiver: String!
  amounts: [BigInt!]!
  amountsInUsd: [BigInt!]!
  tokens: [String!]!
  typeId: Int!
  transactionHash: String!
  blockNumber: Int!
  timestamp: Int!
}

input Distribution_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  receiver: String
  receiver_not: String
  receiver_gt: String
  receiver_lt: String
  receiver_gte: String
  receiver_lte: String
  receiver_in: [String!]
  receiver_not_in: [String!]
  receiver_contains: String
  receiver_contains_nocase: String
  receiver_not_contains: String
  receiver_not_contains_nocase: String
  receiver_starts_with: String
  receiver_starts_with_nocase: String
  receiver_not_starts_with: String
  receiver_not_starts_with_nocase: String
  receiver_ends_with: String
  receiver_ends_with_nocase: String
  receiver_not_ends_with: String
  receiver_not_ends_with_nocase: String
  amounts: [BigInt!]
  amounts_not: [BigInt!]
  amounts_contains: [BigInt!]
  amounts_contains_nocase: [BigInt!]
  amounts_not_contains: [BigInt!]
  amounts_not_contains_nocase: [BigInt!]
  amountsInUsd: [BigInt!]
  amountsInUsd_not: [BigInt!]
  amountsInUsd_contains: [BigInt!]
  amountsInUsd_contains_nocase: [BigInt!]
  amountsInUsd_not_contains: [BigInt!]
  amountsInUsd_not_contains_nocase: [BigInt!]
  tokens: [String!]
  tokens_not: [String!]
  tokens_contains: [String!]
  tokens_contains_nocase: [String!]
  tokens_not_contains: [String!]
  tokens_not_contains_nocase: [String!]
  typeId: Int
  typeId_not: Int
  typeId_gt: Int
  typeId_lt: Int
  typeId_gte: Int
  typeId_lte: Int
  typeId_in: [Int!]
  typeId_not_in: [Int!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Distribution_filter]
  or: [Distribution_filter]
}

enum Distribution_orderBy {
  id
  receiver
  amounts
  amountsInUsd
  tokens
  typeId
  transactionHash
  blockNumber
  timestamp
}

type GlpGmMigrationStat {
  id: ID!
  eligibleRedemptionUsd: BigInt!
  eligibleRedemptionInArb: BigInt!
}

input GlpGmMigrationStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  eligibleRedemptionUsd: BigInt
  eligibleRedemptionUsd_not: BigInt
  eligibleRedemptionUsd_gt: BigInt
  eligibleRedemptionUsd_lt: BigInt
  eligibleRedemptionUsd_gte: BigInt
  eligibleRedemptionUsd_lte: BigInt
  eligibleRedemptionUsd_in: [BigInt!]
  eligibleRedemptionUsd_not_in: [BigInt!]
  eligibleRedemptionInArb: BigInt
  eligibleRedemptionInArb_not: BigInt
  eligibleRedemptionInArb_gt: BigInt
  eligibleRedemptionInArb_lt: BigInt
  eligibleRedemptionInArb_gte: BigInt
  eligibleRedemptionInArb_lte: BigInt
  eligibleRedemptionInArb_in: [BigInt!]
  eligibleRedemptionInArb_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GlpGmMigrationStat_filter]
  or: [GlpGmMigrationStat_filter]
}

enum GlpGmMigrationStat_orderBy {
  id
  eligibleRedemptionUsd
  eligibleRedemptionInArb
}

"""
8 bytes signed integer

"""
scalar Int8

type LatestUserGmTokensBalanceChangeRef {
  id: ID!
  latestUserGmTokensBalanceChange: UserGmTokensBalanceChange
}

input LatestUserGmTokensBalanceChangeRef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  latestUserGmTokensBalanceChange: String
  latestUserGmTokensBalanceChange_not: String
  latestUserGmTokensBalanceChange_gt: String
  latestUserGmTokensBalanceChange_lt: String
  latestUserGmTokensBalanceChange_gte: String
  latestUserGmTokensBalanceChange_lte: String
  latestUserGmTokensBalanceChange_in: [String!]
  latestUserGmTokensBalanceChange_not_in: [String!]
  latestUserGmTokensBalanceChange_contains: String
  latestUserGmTokensBalanceChange_contains_nocase: String
  latestUserGmTokensBalanceChange_not_contains: String
  latestUserGmTokensBalanceChange_not_contains_nocase: String
  latestUserGmTokensBalanceChange_starts_with: String
  latestUserGmTokensBalanceChange_starts_with_nocase: String
  latestUserGmTokensBalanceChange_not_starts_with: String
  latestUserGmTokensBalanceChange_not_starts_with_nocase: String
  latestUserGmTokensBalanceChange_ends_with: String
  latestUserGmTokensBalanceChange_ends_with_nocase: String
  latestUserGmTokensBalanceChange_not_ends_with: String
  latestUserGmTokensBalanceChange_not_ends_with_nocase: String
  latestUserGmTokensBalanceChange_: UserGmTokensBalanceChange_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LatestUserGmTokensBalanceChangeRef_filter]
  or: [LatestUserGmTokensBalanceChangeRef_filter]
}

enum LatestUserGmTokensBalanceChangeRef_orderBy {
  id
  latestUserGmTokensBalanceChange
  latestUserGmTokensBalanceChange__id
  latestUserGmTokensBalanceChange__account
  latestUserGmTokensBalanceChange__marketAddress
  latestUserGmTokensBalanceChange__tokensBalance
  latestUserGmTokensBalanceChange__timestamp
  latestUserGmTokensBalanceChange__cumulativeIncome
  latestUserGmTokensBalanceChange__cumulativeFeeUsdPerGmToken
  latestUserGmTokensBalanceChange__index
}

type LiquidityProviderIncentivesStat {
  id: ID!
  period: String!
  timestamp: Int!
  account: String!
  marketAddress: String!
  updatedTimestamp: Int!
  lastMarketTokensBalance: BigInt!
  cumulativeTimeByMarketTokensBalance: BigInt!
  weightedAverageMarketTokensBalance: BigInt!
}

input LiquidityProviderIncentivesStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  updatedTimestamp: Int
  updatedTimestamp_not: Int
  updatedTimestamp_gt: Int
  updatedTimestamp_lt: Int
  updatedTimestamp_gte: Int
  updatedTimestamp_lte: Int
  updatedTimestamp_in: [Int!]
  updatedTimestamp_not_in: [Int!]
  lastMarketTokensBalance: BigInt
  lastMarketTokensBalance_not: BigInt
  lastMarketTokensBalance_gt: BigInt
  lastMarketTokensBalance_lt: BigInt
  lastMarketTokensBalance_gte: BigInt
  lastMarketTokensBalance_lte: BigInt
  lastMarketTokensBalance_in: [BigInt!]
  lastMarketTokensBalance_not_in: [BigInt!]
  cumulativeTimeByMarketTokensBalance: BigInt
  cumulativeTimeByMarketTokensBalance_not: BigInt
  cumulativeTimeByMarketTokensBalance_gt: BigInt
  cumulativeTimeByMarketTokensBalance_lt: BigInt
  cumulativeTimeByMarketTokensBalance_gte: BigInt
  cumulativeTimeByMarketTokensBalance_lte: BigInt
  cumulativeTimeByMarketTokensBalance_in: [BigInt!]
  cumulativeTimeByMarketTokensBalance_not_in: [BigInt!]
  weightedAverageMarketTokensBalance: BigInt
  weightedAverageMarketTokensBalance_not: BigInt
  weightedAverageMarketTokensBalance_gt: BigInt
  weightedAverageMarketTokensBalance_lt: BigInt
  weightedAverageMarketTokensBalance_gte: BigInt
  weightedAverageMarketTokensBalance_lte: BigInt
  weightedAverageMarketTokensBalance_in: [BigInt!]
  weightedAverageMarketTokensBalance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityProviderIncentivesStat_filter]
  or: [LiquidityProviderIncentivesStat_filter]
}

enum LiquidityProviderIncentivesStat_orderBy {
  id
  period
  timestamp
  account
  marketAddress
  updatedTimestamp
  lastMarketTokensBalance
  cumulativeTimeByMarketTokensBalance
  weightedAverageMarketTokensBalance
}

type MarketIncentivesStat {
  id: ID!
  period: String!
  timestamp: Int!
  marketAddress: String!
  updatedTimestamp: Int!
  lastMarketTokensSupply: BigInt!
  cumulativeTimeByMarketTokensSupply: BigInt!
  weightedAverageMarketTokensSupply: BigInt!
}

input MarketIncentivesStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  updatedTimestamp: Int
  updatedTimestamp_not: Int
  updatedTimestamp_gt: Int
  updatedTimestamp_lt: Int
  updatedTimestamp_gte: Int
  updatedTimestamp_lte: Int
  updatedTimestamp_in: [Int!]
  updatedTimestamp_not_in: [Int!]
  lastMarketTokensSupply: BigInt
  lastMarketTokensSupply_not: BigInt
  lastMarketTokensSupply_gt: BigInt
  lastMarketTokensSupply_lt: BigInt
  lastMarketTokensSupply_gte: BigInt
  lastMarketTokensSupply_lte: BigInt
  lastMarketTokensSupply_in: [BigInt!]
  lastMarketTokensSupply_not_in: [BigInt!]
  cumulativeTimeByMarketTokensSupply: BigInt
  cumulativeTimeByMarketTokensSupply_not: BigInt
  cumulativeTimeByMarketTokensSupply_gt: BigInt
  cumulativeTimeByMarketTokensSupply_lt: BigInt
  cumulativeTimeByMarketTokensSupply_gte: BigInt
  cumulativeTimeByMarketTokensSupply_lte: BigInt
  cumulativeTimeByMarketTokensSupply_in: [BigInt!]
  cumulativeTimeByMarketTokensSupply_not_in: [BigInt!]
  weightedAverageMarketTokensSupply: BigInt
  weightedAverageMarketTokensSupply_not: BigInt
  weightedAverageMarketTokensSupply_gt: BigInt
  weightedAverageMarketTokensSupply_lt: BigInt
  weightedAverageMarketTokensSupply_gte: BigInt
  weightedAverageMarketTokensSupply_lte: BigInt
  weightedAverageMarketTokensSupply_in: [BigInt!]
  weightedAverageMarketTokensSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketIncentivesStat_filter]
  or: [MarketIncentivesStat_filter]
}

enum MarketIncentivesStat_orderBy {
  id
  period
  timestamp
  marketAddress
  updatedTimestamp
  lastMarketTokensSupply
  cumulativeTimeByMarketTokensSupply
  weightedAverageMarketTokensSupply
}

type MarketInfo {
  id: ID!
  marketToken: String!
  indexToken: String!
  longToken: String!
  shortToken: String!
  marketTokensSupply: BigInt!
}

input MarketInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketToken: String
  marketToken_not: String
  marketToken_gt: String
  marketToken_lt: String
  marketToken_gte: String
  marketToken_lte: String
  marketToken_in: [String!]
  marketToken_not_in: [String!]
  marketToken_contains: String
  marketToken_contains_nocase: String
  marketToken_not_contains: String
  marketToken_not_contains_nocase: String
  marketToken_starts_with: String
  marketToken_starts_with_nocase: String
  marketToken_not_starts_with: String
  marketToken_not_starts_with_nocase: String
  marketToken_ends_with: String
  marketToken_ends_with_nocase: String
  marketToken_not_ends_with: String
  marketToken_not_ends_with_nocase: String
  indexToken: String
  indexToken_not: String
  indexToken_gt: String
  indexToken_lt: String
  indexToken_gte: String
  indexToken_lte: String
  indexToken_in: [String!]
  indexToken_not_in: [String!]
  indexToken_contains: String
  indexToken_contains_nocase: String
  indexToken_not_contains: String
  indexToken_not_contains_nocase: String
  indexToken_starts_with: String
  indexToken_starts_with_nocase: String
  indexToken_not_starts_with: String
  indexToken_not_starts_with_nocase: String
  indexToken_ends_with: String
  indexToken_ends_with_nocase: String
  indexToken_not_ends_with: String
  indexToken_not_ends_with_nocase: String
  longToken: String
  longToken_not: String
  longToken_gt: String
  longToken_lt: String
  longToken_gte: String
  longToken_lte: String
  longToken_in: [String!]
  longToken_not_in: [String!]
  longToken_contains: String
  longToken_contains_nocase: String
  longToken_not_contains: String
  longToken_not_contains_nocase: String
  longToken_starts_with: String
  longToken_starts_with_nocase: String
  longToken_not_starts_with: String
  longToken_not_starts_with_nocase: String
  longToken_ends_with: String
  longToken_ends_with_nocase: String
  longToken_not_ends_with: String
  longToken_not_ends_with_nocase: String
  shortToken: String
  shortToken_not: String
  shortToken_gt: String
  shortToken_lt: String
  shortToken_gte: String
  shortToken_lte: String
  shortToken_in: [String!]
  shortToken_not_in: [String!]
  shortToken_contains: String
  shortToken_contains_nocase: String
  shortToken_not_contains: String
  shortToken_not_contains_nocase: String
  shortToken_starts_with: String
  shortToken_starts_with_nocase: String
  shortToken_not_starts_with: String
  shortToken_not_starts_with_nocase: String
  shortToken_ends_with: String
  shortToken_ends_with_nocase: String
  shortToken_not_ends_with: String
  shortToken_not_ends_with_nocase: String
  marketTokensSupply: BigInt
  marketTokensSupply_not: BigInt
  marketTokensSupply_gt: BigInt
  marketTokensSupply_lt: BigInt
  marketTokensSupply_gte: BigInt
  marketTokensSupply_lte: BigInt
  marketTokensSupply_in: [BigInt!]
  marketTokensSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketInfo_filter]
  or: [MarketInfo_filter]
}

enum MarketInfo_orderBy {
  id
  marketToken
  indexToken
  longToken
  shortToken
  marketTokensSupply
}

type Order {
  id: ID!
  account: String!
  receiver: String!
  callbackContract: String!
  marketAddress: String!
  swapPath: [String!]
  initialCollateralTokenAddress: String!
  sizeDeltaUsd: BigInt!
  initialCollateralDeltaAmount: BigInt!
  triggerPrice: BigInt!
  acceptablePrice: BigInt!
  executionFee: BigInt!
  callbackGasLimit: BigInt!
  minOutputAmount: BigInt!
  updatedAtBlock: BigInt!
  orderType: BigInt!
  shouldUnwrapNativeToken: Boolean!
  isLong: Boolean!
  status: OrderStatus!
  cancelledReason: String
  cancelledReasonBytes: Bytes
  frozenReason: String
  frozenReasonBytes: Bytes
  createdTxn: Transaction!
  cancelledTxn: Transaction
  executedTxn: Transaction
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

enum OrderStatus {
  Created
  Executed
  Cancelled
  Frozen
}

input Order_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  receiver: String
  receiver_not: String
  receiver_gt: String
  receiver_lt: String
  receiver_gte: String
  receiver_lte: String
  receiver_in: [String!]
  receiver_not_in: [String!]
  receiver_contains: String
  receiver_contains_nocase: String
  receiver_not_contains: String
  receiver_not_contains_nocase: String
  receiver_starts_with: String
  receiver_starts_with_nocase: String
  receiver_not_starts_with: String
  receiver_not_starts_with_nocase: String
  receiver_ends_with: String
  receiver_ends_with_nocase: String
  receiver_not_ends_with: String
  receiver_not_ends_with_nocase: String
  callbackContract: String
  callbackContract_not: String
  callbackContract_gt: String
  callbackContract_lt: String
  callbackContract_gte: String
  callbackContract_lte: String
  callbackContract_in: [String!]
  callbackContract_not_in: [String!]
  callbackContract_contains: String
  callbackContract_contains_nocase: String
  callbackContract_not_contains: String
  callbackContract_not_contains_nocase: String
  callbackContract_starts_with: String
  callbackContract_starts_with_nocase: String
  callbackContract_not_starts_with: String
  callbackContract_not_starts_with_nocase: String
  callbackContract_ends_with: String
  callbackContract_ends_with_nocase: String
  callbackContract_not_ends_with: String
  callbackContract_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  swapPath: [String!]
  swapPath_not: [String!]
  swapPath_contains: [String!]
  swapPath_contains_nocase: [String!]
  swapPath_not_contains: [String!]
  swapPath_not_contains_nocase: [String!]
  initialCollateralTokenAddress: String
  initialCollateralTokenAddress_not: String
  initialCollateralTokenAddress_gt: String
  initialCollateralTokenAddress_lt: String
  initialCollateralTokenAddress_gte: String
  initialCollateralTokenAddress_lte: String
  initialCollateralTokenAddress_in: [String!]
  initialCollateralTokenAddress_not_in: [String!]
  initialCollateralTokenAddress_contains: String
  initialCollateralTokenAddress_contains_nocase: String
  initialCollateralTokenAddress_not_contains: String
  initialCollateralTokenAddress_not_contains_nocase: String
  initialCollateralTokenAddress_starts_with: String
  initialCollateralTokenAddress_starts_with_nocase: String
  initialCollateralTokenAddress_not_starts_with: String
  initialCollateralTokenAddress_not_starts_with_nocase: String
  initialCollateralTokenAddress_ends_with: String
  initialCollateralTokenAddress_ends_with_nocase: String
  initialCollateralTokenAddress_not_ends_with: String
  initialCollateralTokenAddress_not_ends_with_nocase: String
  sizeDeltaUsd: BigInt
  sizeDeltaUsd_not: BigInt
  sizeDeltaUsd_gt: BigInt
  sizeDeltaUsd_lt: BigInt
  sizeDeltaUsd_gte: BigInt
  sizeDeltaUsd_lte: BigInt
  sizeDeltaUsd_in: [BigInt!]
  sizeDeltaUsd_not_in: [BigInt!]
  initialCollateralDeltaAmount: BigInt
  initialCollateralDeltaAmount_not: BigInt
  initialCollateralDeltaAmount_gt: BigInt
  initialCollateralDeltaAmount_lt: BigInt
  initialCollateralDeltaAmount_gte: BigInt
  initialCollateralDeltaAmount_lte: BigInt
  initialCollateralDeltaAmount_in: [BigInt!]
  initialCollateralDeltaAmount_not_in: [BigInt!]
  triggerPrice: BigInt
  triggerPrice_not: BigInt
  triggerPrice_gt: BigInt
  triggerPrice_lt: BigInt
  triggerPrice_gte: BigInt
  triggerPrice_lte: BigInt
  triggerPrice_in: [BigInt!]
  triggerPrice_not_in: [BigInt!]
  acceptablePrice: BigInt
  acceptablePrice_not: BigInt
  acceptablePrice_gt: BigInt
  acceptablePrice_lt: BigInt
  acceptablePrice_gte: BigInt
  acceptablePrice_lte: BigInt
  acceptablePrice_in: [BigInt!]
  acceptablePrice_not_in: [BigInt!]
  executionFee: BigInt
  executionFee_not: BigInt
  executionFee_gt: BigInt
  executionFee_lt: BigInt
  executionFee_gte: BigInt
  executionFee_lte: BigInt
  executionFee_in: [BigInt!]
  executionFee_not_in: [BigInt!]
  callbackGasLimit: BigInt
  callbackGasLimit_not: BigInt
  callbackGasLimit_gt: BigInt
  callbackGasLimit_lt: BigInt
  callbackGasLimit_gte: BigInt
  callbackGasLimit_lte: BigInt
  callbackGasLimit_in: [BigInt!]
  callbackGasLimit_not_in: [BigInt!]
  minOutputAmount: BigInt
  minOutputAmount_not: BigInt
  minOutputAmount_gt: BigInt
  minOutputAmount_lt: BigInt
  minOutputAmount_gte: BigInt
  minOutputAmount_lte: BigInt
  minOutputAmount_in: [BigInt!]
  minOutputAmount_not_in: [BigInt!]
  updatedAtBlock: BigInt
  updatedAtBlock_not: BigInt
  updatedAtBlock_gt: BigInt
  updatedAtBlock_lt: BigInt
  updatedAtBlock_gte: BigInt
  updatedAtBlock_lte: BigInt
  updatedAtBlock_in: [BigInt!]
  updatedAtBlock_not_in: [BigInt!]
  orderType: BigInt
  orderType_not: BigInt
  orderType_gt: BigInt
  orderType_lt: BigInt
  orderType_gte: BigInt
  orderType_lte: BigInt
  orderType_in: [BigInt!]
  orderType_not_in: [BigInt!]
  shouldUnwrapNativeToken: Boolean
  shouldUnwrapNativeToken_not: Boolean
  shouldUnwrapNativeToken_in: [Boolean!]
  shouldUnwrapNativeToken_not_in: [Boolean!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  status: OrderStatus
  status_not: OrderStatus
  status_in: [OrderStatus!]
  status_not_in: [OrderStatus!]
  cancelledReason: String
  cancelledReason_not: String
  cancelledReason_gt: String
  cancelledReason_lt: String
  cancelledReason_gte: String
  cancelledReason_lte: String
  cancelledReason_in: [String!]
  cancelledReason_not_in: [String!]
  cancelledReason_contains: String
  cancelledReason_contains_nocase: String
  cancelledReason_not_contains: String
  cancelledReason_not_contains_nocase: String
  cancelledReason_starts_with: String
  cancelledReason_starts_with_nocase: String
  cancelledReason_not_starts_with: String
  cancelledReason_not_starts_with_nocase: String
  cancelledReason_ends_with: String
  cancelledReason_ends_with_nocase: String
  cancelledReason_not_ends_with: String
  cancelledReason_not_ends_with_nocase: String
  cancelledReasonBytes: Bytes
  cancelledReasonBytes_not: Bytes
  cancelledReasonBytes_gt: Bytes
  cancelledReasonBytes_lt: Bytes
  cancelledReasonBytes_gte: Bytes
  cancelledReasonBytes_lte: Bytes
  cancelledReasonBytes_in: [Bytes!]
  cancelledReasonBytes_not_in: [Bytes!]
  cancelledReasonBytes_contains: Bytes
  cancelledReasonBytes_not_contains: Bytes
  frozenReason: String
  frozenReason_not: String
  frozenReason_gt: String
  frozenReason_lt: String
  frozenReason_gte: String
  frozenReason_lte: String
  frozenReason_in: [String!]
  frozenReason_not_in: [String!]
  frozenReason_contains: String
  frozenReason_contains_nocase: String
  frozenReason_not_contains: String
  frozenReason_not_contains_nocase: String
  frozenReason_starts_with: String
  frozenReason_starts_with_nocase: String
  frozenReason_not_starts_with: String
  frozenReason_not_starts_with_nocase: String
  frozenReason_ends_with: String
  frozenReason_ends_with_nocase: String
  frozenReason_not_ends_with: String
  frozenReason_not_ends_with_nocase: String
  frozenReasonBytes: Bytes
  frozenReasonBytes_not: Bytes
  frozenReasonBytes_gt: Bytes
  frozenReasonBytes_lt: Bytes
  frozenReasonBytes_gte: Bytes
  frozenReasonBytes_lte: Bytes
  frozenReasonBytes_in: [Bytes!]
  frozenReasonBytes_not_in: [Bytes!]
  frozenReasonBytes_contains: Bytes
  frozenReasonBytes_not_contains: Bytes
  createdTxn: String
  createdTxn_not: String
  createdTxn_gt: String
  createdTxn_lt: String
  createdTxn_gte: String
  createdTxn_lte: String
  createdTxn_in: [String!]
  createdTxn_not_in: [String!]
  createdTxn_contains: String
  createdTxn_contains_nocase: String
  createdTxn_not_contains: String
  createdTxn_not_contains_nocase: String
  createdTxn_starts_with: String
  createdTxn_starts_with_nocase: String
  createdTxn_not_starts_with: String
  createdTxn_not_starts_with_nocase: String
  createdTxn_ends_with: String
  createdTxn_ends_with_nocase: String
  createdTxn_not_ends_with: String
  createdTxn_not_ends_with_nocase: String
  createdTxn_: Transaction_filter
  cancelledTxn: String
  cancelledTxn_not: String
  cancelledTxn_gt: String
  cancelledTxn_lt: String
  cancelledTxn_gte: String
  cancelledTxn_lte: String
  cancelledTxn_in: [String!]
  cancelledTxn_not_in: [String!]
  cancelledTxn_contains: String
  cancelledTxn_contains_nocase: String
  cancelledTxn_not_contains: String
  cancelledTxn_not_contains_nocase: String
  cancelledTxn_starts_with: String
  cancelledTxn_starts_with_nocase: String
  cancelledTxn_not_starts_with: String
  cancelledTxn_not_starts_with_nocase: String
  cancelledTxn_ends_with: String
  cancelledTxn_ends_with_nocase: String
  cancelledTxn_not_ends_with: String
  cancelledTxn_not_ends_with_nocase: String
  cancelledTxn_: Transaction_filter
  executedTxn: String
  executedTxn_not: String
  executedTxn_gt: String
  executedTxn_lt: String
  executedTxn_gte: String
  executedTxn_lte: String
  executedTxn_in: [String!]
  executedTxn_not_in: [String!]
  executedTxn_contains: String
  executedTxn_contains_nocase: String
  executedTxn_not_contains: String
  executedTxn_not_contains_nocase: String
  executedTxn_starts_with: String
  executedTxn_starts_with_nocase: String
  executedTxn_not_starts_with: String
  executedTxn_not_starts_with_nocase: String
  executedTxn_ends_with: String
  executedTxn_ends_with_nocase: String
  executedTxn_not_ends_with: String
  executedTxn_not_ends_with_nocase: String
  executedTxn_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Order_filter]
  or: [Order_filter]
}

enum Order_orderBy {
  id
  account
  receiver
  callbackContract
  marketAddress
  swapPath
  initialCollateralTokenAddress
  sizeDeltaUsd
  initialCollateralDeltaAmount
  triggerPrice
  acceptablePrice
  executionFee
  callbackGasLimit
  minOutputAmount
  updatedAtBlock
  orderType
  shouldUnwrapNativeToken
  isLong
  status
  cancelledReason
  cancelledReasonBytes
  frozenReason
  frozenReasonBytes
  createdTxn
  createdTxn__id
  createdTxn__from
  createdTxn__to
  createdTxn__hash
  createdTxn__timestamp
  createdTxn__blockNumber
  createdTxn__transactionIndex
  cancelledTxn
  cancelledTxn__id
  cancelledTxn__from
  cancelledTxn__to
  cancelledTxn__hash
  cancelledTxn__timestamp
  cancelledTxn__blockNumber
  cancelledTxn__transactionIndex
  executedTxn
  executedTxn__id
  executedTxn__from
  executedTxn__to
  executedTxn__hash
  executedTxn__timestamp
  executedTxn__blockNumber
  executedTxn__transactionIndex
}

type PoolAmountUpdate {
  id: ID!
  marketAddress: String!
  tokenAddress: String!
  delta: BigInt!
  nextValue: BigInt!
  transaction: Transaction!
}

input PoolAmountUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  delta: BigInt
  delta_not: BigInt
  delta_gt: BigInt
  delta_lt: BigInt
  delta_gte: BigInt
  delta_lte: BigInt
  delta_in: [BigInt!]
  delta_not_in: [BigInt!]
  nextValue: BigInt
  nextValue_not: BigInt
  nextValue_gt: BigInt
  nextValue_lt: BigInt
  nextValue_gte: BigInt
  nextValue_lte: BigInt
  nextValue_in: [BigInt!]
  nextValue_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolAmountUpdate_filter]
  or: [PoolAmountUpdate_filter]
}

enum PoolAmountUpdate_orderBy {
  id
  marketAddress
  tokenAddress
  delta
  nextValue
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type PositionDecrease {
  id: ID!
  orderKey: String!
  positionKey: String!
  account: String!
  marketAddress: String!
  collateralTokenAddress: String!
  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  executionPrice: BigInt!
  priceImpactDiffUsd: BigInt!
  priceImpactUsd: BigInt!
  orderType: BigInt!
  borrowingFactor: BigInt!
  longTokenFundingAmountPerSize: BigInt!
  shortTokenFundingAmountPerSize: BigInt!
  priceImpactAmount: BigInt!
  basePnlUsd: BigInt!
  isLong: Boolean!
  transaction: Transaction
}

input PositionDecrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orderKey: String
  orderKey_not: String
  orderKey_gt: String
  orderKey_lt: String
  orderKey_gte: String
  orderKey_lte: String
  orderKey_in: [String!]
  orderKey_not_in: [String!]
  orderKey_contains: String
  orderKey_contains_nocase: String
  orderKey_not_contains: String
  orderKey_not_contains_nocase: String
  orderKey_starts_with: String
  orderKey_starts_with_nocase: String
  orderKey_not_starts_with: String
  orderKey_not_starts_with_nocase: String
  orderKey_ends_with: String
  orderKey_ends_with_nocase: String
  orderKey_not_ends_with: String
  orderKey_not_ends_with_nocase: String
  positionKey: String
  positionKey_not: String
  positionKey_gt: String
  positionKey_lt: String
  positionKey_gte: String
  positionKey_lte: String
  positionKey_in: [String!]
  positionKey_not_in: [String!]
  positionKey_contains: String
  positionKey_contains_nocase: String
  positionKey_not_contains: String
  positionKey_not_contains_nocase: String
  positionKey_starts_with: String
  positionKey_starts_with_nocase: String
  positionKey_not_starts_with: String
  positionKey_not_starts_with_nocase: String
  positionKey_ends_with: String
  positionKey_ends_with_nocase: String
  positionKey_not_ends_with: String
  positionKey_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  collateralTokenAddress: String
  collateralTokenAddress_not: String
  collateralTokenAddress_gt: String
  collateralTokenAddress_lt: String
  collateralTokenAddress_gte: String
  collateralTokenAddress_lte: String
  collateralTokenAddress_in: [String!]
  collateralTokenAddress_not_in: [String!]
  collateralTokenAddress_contains: String
  collateralTokenAddress_contains_nocase: String
  collateralTokenAddress_not_contains: String
  collateralTokenAddress_not_contains_nocase: String
  collateralTokenAddress_starts_with: String
  collateralTokenAddress_starts_with_nocase: String
  collateralTokenAddress_not_starts_with: String
  collateralTokenAddress_not_starts_with_nocase: String
  collateralTokenAddress_ends_with: String
  collateralTokenAddress_ends_with_nocase: String
  collateralTokenAddress_not_ends_with: String
  collateralTokenAddress_not_ends_with_nocase: String
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMin_not: BigInt
  collateralTokenPriceMin_gt: BigInt
  collateralTokenPriceMin_lt: BigInt
  collateralTokenPriceMin_gte: BigInt
  collateralTokenPriceMin_lte: BigInt
  collateralTokenPriceMin_in: [BigInt!]
  collateralTokenPriceMin_not_in: [BigInt!]
  collateralTokenPriceMax: BigInt
  collateralTokenPriceMax_not: BigInt
  collateralTokenPriceMax_gt: BigInt
  collateralTokenPriceMax_lt: BigInt
  collateralTokenPriceMax_gte: BigInt
  collateralTokenPriceMax_lte: BigInt
  collateralTokenPriceMax_in: [BigInt!]
  collateralTokenPriceMax_not_in: [BigInt!]
  sizeInUsd: BigInt
  sizeInUsd_not: BigInt
  sizeInUsd_gt: BigInt
  sizeInUsd_lt: BigInt
  sizeInUsd_gte: BigInt
  sizeInUsd_lte: BigInt
  sizeInUsd_in: [BigInt!]
  sizeInUsd_not_in: [BigInt!]
  sizeInTokens: BigInt
  sizeInTokens_not: BigInt
  sizeInTokens_gt: BigInt
  sizeInTokens_lt: BigInt
  sizeInTokens_gte: BigInt
  sizeInTokens_lte: BigInt
  sizeInTokens_in: [BigInt!]
  sizeInTokens_not_in: [BigInt!]
  collateralAmount: BigInt
  collateralAmount_not: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_lt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_not_in: [BigInt!]
  sizeDeltaUsd: BigInt
  sizeDeltaUsd_not: BigInt
  sizeDeltaUsd_gt: BigInt
  sizeDeltaUsd_lt: BigInt
  sizeDeltaUsd_gte: BigInt
  sizeDeltaUsd_lte: BigInt
  sizeDeltaUsd_in: [BigInt!]
  sizeDeltaUsd_not_in: [BigInt!]
  sizeDeltaInTokens: BigInt
  sizeDeltaInTokens_not: BigInt
  sizeDeltaInTokens_gt: BigInt
  sizeDeltaInTokens_lt: BigInt
  sizeDeltaInTokens_gte: BigInt
  sizeDeltaInTokens_lte: BigInt
  sizeDeltaInTokens_in: [BigInt!]
  sizeDeltaInTokens_not_in: [BigInt!]
  collateralDeltaAmount: BigInt
  collateralDeltaAmount_not: BigInt
  collateralDeltaAmount_gt: BigInt
  collateralDeltaAmount_lt: BigInt
  collateralDeltaAmount_gte: BigInt
  collateralDeltaAmount_lte: BigInt
  collateralDeltaAmount_in: [BigInt!]
  collateralDeltaAmount_not_in: [BigInt!]
  executionPrice: BigInt
  executionPrice_not: BigInt
  executionPrice_gt: BigInt
  executionPrice_lt: BigInt
  executionPrice_gte: BigInt
  executionPrice_lte: BigInt
  executionPrice_in: [BigInt!]
  executionPrice_not_in: [BigInt!]
  priceImpactDiffUsd: BigInt
  priceImpactDiffUsd_not: BigInt
  priceImpactDiffUsd_gt: BigInt
  priceImpactDiffUsd_lt: BigInt
  priceImpactDiffUsd_gte: BigInt
  priceImpactDiffUsd_lte: BigInt
  priceImpactDiffUsd_in: [BigInt!]
  priceImpactDiffUsd_not_in: [BigInt!]
  priceImpactUsd: BigInt
  priceImpactUsd_not: BigInt
  priceImpactUsd_gt: BigInt
  priceImpactUsd_lt: BigInt
  priceImpactUsd_gte: BigInt
  priceImpactUsd_lte: BigInt
  priceImpactUsd_in: [BigInt!]
  priceImpactUsd_not_in: [BigInt!]
  orderType: BigInt
  orderType_not: BigInt
  orderType_gt: BigInt
  orderType_lt: BigInt
  orderType_gte: BigInt
  orderType_lte: BigInt
  orderType_in: [BigInt!]
  orderType_not_in: [BigInt!]
  borrowingFactor: BigInt
  borrowingFactor_not: BigInt
  borrowingFactor_gt: BigInt
  borrowingFactor_lt: BigInt
  borrowingFactor_gte: BigInt
  borrowingFactor_lte: BigInt
  borrowingFactor_in: [BigInt!]
  borrowingFactor_not_in: [BigInt!]
  longTokenFundingAmountPerSize: BigInt
  longTokenFundingAmountPerSize_not: BigInt
  longTokenFundingAmountPerSize_gt: BigInt
  longTokenFundingAmountPerSize_lt: BigInt
  longTokenFundingAmountPerSize_gte: BigInt
  longTokenFundingAmountPerSize_lte: BigInt
  longTokenFundingAmountPerSize_in: [BigInt!]
  longTokenFundingAmountPerSize_not_in: [BigInt!]
  shortTokenFundingAmountPerSize: BigInt
  shortTokenFundingAmountPerSize_not: BigInt
  shortTokenFundingAmountPerSize_gt: BigInt
  shortTokenFundingAmountPerSize_lt: BigInt
  shortTokenFundingAmountPerSize_gte: BigInt
  shortTokenFundingAmountPerSize_lte: BigInt
  shortTokenFundingAmountPerSize_in: [BigInt!]
  shortTokenFundingAmountPerSize_not_in: [BigInt!]
  priceImpactAmount: BigInt
  priceImpactAmount_not: BigInt
  priceImpactAmount_gt: BigInt
  priceImpactAmount_lt: BigInt
  priceImpactAmount_gte: BigInt
  priceImpactAmount_lte: BigInt
  priceImpactAmount_in: [BigInt!]
  priceImpactAmount_not_in: [BigInt!]
  basePnlUsd: BigInt
  basePnlUsd_not: BigInt
  basePnlUsd_gt: BigInt
  basePnlUsd_lt: BigInt
  basePnlUsd_gte: BigInt
  basePnlUsd_lte: BigInt
  basePnlUsd_in: [BigInt!]
  basePnlUsd_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionDecrease_filter]
  or: [PositionDecrease_filter]
}

enum PositionDecrease_orderBy {
  id
  orderKey
  positionKey
  account
  marketAddress
  collateralTokenAddress
  collateralTokenPriceMin
  collateralTokenPriceMax
  sizeInUsd
  sizeInTokens
  collateralAmount
  sizeDeltaUsd
  sizeDeltaInTokens
  collateralDeltaAmount
  executionPrice
  priceImpactDiffUsd
  priceImpactUsd
  orderType
  borrowingFactor
  longTokenFundingAmountPerSize
  shortTokenFundingAmountPerSize
  priceImpactAmount
  basePnlUsd
  isLong
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type PositionFeesInfo {
  id: ID!
  eventName: String!
  orderKey: String!
  marketAddress: String!
  collateralTokenAddress: String!
  trader: String!
  affiliate: String!
  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  positionFeeAmount: BigInt!
  borrowingFeeAmount: BigInt!
  fundingFeeAmount: BigInt!
  feeUsdForPool: BigInt!
  totalRebateFactor: BigInt!
  traderDiscountAmount: BigInt!
  totalRebateAmount: BigInt!
  affiliateRewardAmount: BigInt!
  transaction: Transaction!
}

type PositionFeesInfoWithPeriod {
  id: ID!
  period: String!
  totalPositionFeeAmountForPool: BigInt!
  totalPositionFeeUsdForPool: BigInt!
  totalPositionFeeAmount: BigInt!
  totalPositionFeeUsd: BigInt!
  totalBorrowingFeeUsd: BigInt!
}

input PositionFeesInfoWithPeriod_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  totalPositionFeeAmountForPool: BigInt
  totalPositionFeeAmountForPool_not: BigInt
  totalPositionFeeAmountForPool_gt: BigInt
  totalPositionFeeAmountForPool_lt: BigInt
  totalPositionFeeAmountForPool_gte: BigInt
  totalPositionFeeAmountForPool_lte: BigInt
  totalPositionFeeAmountForPool_in: [BigInt!]
  totalPositionFeeAmountForPool_not_in: [BigInt!]
  totalPositionFeeUsdForPool: BigInt
  totalPositionFeeUsdForPool_not: BigInt
  totalPositionFeeUsdForPool_gt: BigInt
  totalPositionFeeUsdForPool_lt: BigInt
  totalPositionFeeUsdForPool_gte: BigInt
  totalPositionFeeUsdForPool_lte: BigInt
  totalPositionFeeUsdForPool_in: [BigInt!]
  totalPositionFeeUsdForPool_not_in: [BigInt!]
  totalPositionFeeAmount: BigInt
  totalPositionFeeAmount_not: BigInt
  totalPositionFeeAmount_gt: BigInt
  totalPositionFeeAmount_lt: BigInt
  totalPositionFeeAmount_gte: BigInt
  totalPositionFeeAmount_lte: BigInt
  totalPositionFeeAmount_in: [BigInt!]
  totalPositionFeeAmount_not_in: [BigInt!]
  totalPositionFeeUsd: BigInt
  totalPositionFeeUsd_not: BigInt
  totalPositionFeeUsd_gt: BigInt
  totalPositionFeeUsd_lt: BigInt
  totalPositionFeeUsd_gte: BigInt
  totalPositionFeeUsd_lte: BigInt
  totalPositionFeeUsd_in: [BigInt!]
  totalPositionFeeUsd_not_in: [BigInt!]
  totalBorrowingFeeUsd: BigInt
  totalBorrowingFeeUsd_not: BigInt
  totalBorrowingFeeUsd_gt: BigInt
  totalBorrowingFeeUsd_lt: BigInt
  totalBorrowingFeeUsd_gte: BigInt
  totalBorrowingFeeUsd_lte: BigInt
  totalBorrowingFeeUsd_in: [BigInt!]
  totalBorrowingFeeUsd_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionFeesInfoWithPeriod_filter]
  or: [PositionFeesInfoWithPeriod_filter]
}

enum PositionFeesInfoWithPeriod_orderBy {
  id
  period
  totalPositionFeeAmountForPool
  totalPositionFeeUsdForPool
  totalPositionFeeAmount
  totalPositionFeeUsd
  totalBorrowingFeeUsd
}

input PositionFeesInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  eventName: String
  eventName_not: String
  eventName_gt: String
  eventName_lt: String
  eventName_gte: String
  eventName_lte: String
  eventName_in: [String!]
  eventName_not_in: [String!]
  eventName_contains: String
  eventName_contains_nocase: String
  eventName_not_contains: String
  eventName_not_contains_nocase: String
  eventName_starts_with: String
  eventName_starts_with_nocase: String
  eventName_not_starts_with: String
  eventName_not_starts_with_nocase: String
  eventName_ends_with: String
  eventName_ends_with_nocase: String
  eventName_not_ends_with: String
  eventName_not_ends_with_nocase: String
  orderKey: String
  orderKey_not: String
  orderKey_gt: String
  orderKey_lt: String
  orderKey_gte: String
  orderKey_lte: String
  orderKey_in: [String!]
  orderKey_not_in: [String!]
  orderKey_contains: String
  orderKey_contains_nocase: String
  orderKey_not_contains: String
  orderKey_not_contains_nocase: String
  orderKey_starts_with: String
  orderKey_starts_with_nocase: String
  orderKey_not_starts_with: String
  orderKey_not_starts_with_nocase: String
  orderKey_ends_with: String
  orderKey_ends_with_nocase: String
  orderKey_not_ends_with: String
  orderKey_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  collateralTokenAddress: String
  collateralTokenAddress_not: String
  collateralTokenAddress_gt: String
  collateralTokenAddress_lt: String
  collateralTokenAddress_gte: String
  collateralTokenAddress_lte: String
  collateralTokenAddress_in: [String!]
  collateralTokenAddress_not_in: [String!]
  collateralTokenAddress_contains: String
  collateralTokenAddress_contains_nocase: String
  collateralTokenAddress_not_contains: String
  collateralTokenAddress_not_contains_nocase: String
  collateralTokenAddress_starts_with: String
  collateralTokenAddress_starts_with_nocase: String
  collateralTokenAddress_not_starts_with: String
  collateralTokenAddress_not_starts_with_nocase: String
  collateralTokenAddress_ends_with: String
  collateralTokenAddress_ends_with_nocase: String
  collateralTokenAddress_not_ends_with: String
  collateralTokenAddress_not_ends_with_nocase: String
  trader: String
  trader_not: String
  trader_gt: String
  trader_lt: String
  trader_gte: String
  trader_lte: String
  trader_in: [String!]
  trader_not_in: [String!]
  trader_contains: String
  trader_contains_nocase: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMin_not: BigInt
  collateralTokenPriceMin_gt: BigInt
  collateralTokenPriceMin_lt: BigInt
  collateralTokenPriceMin_gte: BigInt
  collateralTokenPriceMin_lte: BigInt
  collateralTokenPriceMin_in: [BigInt!]
  collateralTokenPriceMin_not_in: [BigInt!]
  collateralTokenPriceMax: BigInt
  collateralTokenPriceMax_not: BigInt
  collateralTokenPriceMax_gt: BigInt
  collateralTokenPriceMax_lt: BigInt
  collateralTokenPriceMax_gte: BigInt
  collateralTokenPriceMax_lte: BigInt
  collateralTokenPriceMax_in: [BigInt!]
  collateralTokenPriceMax_not_in: [BigInt!]
  positionFeeAmount: BigInt
  positionFeeAmount_not: BigInt
  positionFeeAmount_gt: BigInt
  positionFeeAmount_lt: BigInt
  positionFeeAmount_gte: BigInt
  positionFeeAmount_lte: BigInt
  positionFeeAmount_in: [BigInt!]
  positionFeeAmount_not_in: [BigInt!]
  borrowingFeeAmount: BigInt
  borrowingFeeAmount_not: BigInt
  borrowingFeeAmount_gt: BigInt
  borrowingFeeAmount_lt: BigInt
  borrowingFeeAmount_gte: BigInt
  borrowingFeeAmount_lte: BigInt
  borrowingFeeAmount_in: [BigInt!]
  borrowingFeeAmount_not_in: [BigInt!]
  fundingFeeAmount: BigInt
  fundingFeeAmount_not: BigInt
  fundingFeeAmount_gt: BigInt
  fundingFeeAmount_lt: BigInt
  fundingFeeAmount_gte: BigInt
  fundingFeeAmount_lte: BigInt
  fundingFeeAmount_in: [BigInt!]
  fundingFeeAmount_not_in: [BigInt!]
  feeUsdForPool: BigInt
  feeUsdForPool_not: BigInt
  feeUsdForPool_gt: BigInt
  feeUsdForPool_lt: BigInt
  feeUsdForPool_gte: BigInt
  feeUsdForPool_lte: BigInt
  feeUsdForPool_in: [BigInt!]
  feeUsdForPool_not_in: [BigInt!]
  totalRebateFactor: BigInt
  totalRebateFactor_not: BigInt
  totalRebateFactor_gt: BigInt
  totalRebateFactor_lt: BigInt
  totalRebateFactor_gte: BigInt
  totalRebateFactor_lte: BigInt
  totalRebateFactor_in: [BigInt!]
  totalRebateFactor_not_in: [BigInt!]
  traderDiscountAmount: BigInt
  traderDiscountAmount_not: BigInt
  traderDiscountAmount_gt: BigInt
  traderDiscountAmount_lt: BigInt
  traderDiscountAmount_gte: BigInt
  traderDiscountAmount_lte: BigInt
  traderDiscountAmount_in: [BigInt!]
  traderDiscountAmount_not_in: [BigInt!]
  totalRebateAmount: BigInt
  totalRebateAmount_not: BigInt
  totalRebateAmount_gt: BigInt
  totalRebateAmount_lt: BigInt
  totalRebateAmount_gte: BigInt
  totalRebateAmount_lte: BigInt
  totalRebateAmount_in: [BigInt!]
  totalRebateAmount_not_in: [BigInt!]
  affiliateRewardAmount: BigInt
  affiliateRewardAmount_not: BigInt
  affiliateRewardAmount_gt: BigInt
  affiliateRewardAmount_lt: BigInt
  affiliateRewardAmount_gte: BigInt
  affiliateRewardAmount_lte: BigInt
  affiliateRewardAmount_in: [BigInt!]
  affiliateRewardAmount_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionFeesInfo_filter]
  or: [PositionFeesInfo_filter]
}

enum PositionFeesInfo_orderBy {
  id
  eventName
  orderKey
  marketAddress
  collateralTokenAddress
  trader
  affiliate
  collateralTokenPriceMin
  collateralTokenPriceMax
  positionFeeAmount
  borrowingFeeAmount
  fundingFeeAmount
  feeUsdForPool
  totalRebateFactor
  traderDiscountAmount
  totalRebateAmount
  affiliateRewardAmount
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type PositionIncrease {
  id: ID!
  orderKey: String!
  positionKey: String!
  account: String!
  marketAddress: String!
  collateralTokenAddress: String!
  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  executionPrice: BigInt!
  priceImpactDiffUsd: BigInt!
  orderType: BigInt!
  borrowingFactor: BigInt!
  longTokenFundingAmountPerSize: BigInt!
  shortTokenFundingAmountPerSize: BigInt!
  priceImpactAmount: BigInt!
  priceImpactUsd: BigInt!
  basePnlUsd: BigInt!
  isLong: Boolean!
  transaction: Transaction
}

input PositionIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orderKey: String
  orderKey_not: String
  orderKey_gt: String
  orderKey_lt: String
  orderKey_gte: String
  orderKey_lte: String
  orderKey_in: [String!]
  orderKey_not_in: [String!]
  orderKey_contains: String
  orderKey_contains_nocase: String
  orderKey_not_contains: String
  orderKey_not_contains_nocase: String
  orderKey_starts_with: String
  orderKey_starts_with_nocase: String
  orderKey_not_starts_with: String
  orderKey_not_starts_with_nocase: String
  orderKey_ends_with: String
  orderKey_ends_with_nocase: String
  orderKey_not_ends_with: String
  orderKey_not_ends_with_nocase: String
  positionKey: String
  positionKey_not: String
  positionKey_gt: String
  positionKey_lt: String
  positionKey_gte: String
  positionKey_lte: String
  positionKey_in: [String!]
  positionKey_not_in: [String!]
  positionKey_contains: String
  positionKey_contains_nocase: String
  positionKey_not_contains: String
  positionKey_not_contains_nocase: String
  positionKey_starts_with: String
  positionKey_starts_with_nocase: String
  positionKey_not_starts_with: String
  positionKey_not_starts_with_nocase: String
  positionKey_ends_with: String
  positionKey_ends_with_nocase: String
  positionKey_not_ends_with: String
  positionKey_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  collateralTokenAddress: String
  collateralTokenAddress_not: String
  collateralTokenAddress_gt: String
  collateralTokenAddress_lt: String
  collateralTokenAddress_gte: String
  collateralTokenAddress_lte: String
  collateralTokenAddress_in: [String!]
  collateralTokenAddress_not_in: [String!]
  collateralTokenAddress_contains: String
  collateralTokenAddress_contains_nocase: String
  collateralTokenAddress_not_contains: String
  collateralTokenAddress_not_contains_nocase: String
  collateralTokenAddress_starts_with: String
  collateralTokenAddress_starts_with_nocase: String
  collateralTokenAddress_not_starts_with: String
  collateralTokenAddress_not_starts_with_nocase: String
  collateralTokenAddress_ends_with: String
  collateralTokenAddress_ends_with_nocase: String
  collateralTokenAddress_not_ends_with: String
  collateralTokenAddress_not_ends_with_nocase: String
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMin_not: BigInt
  collateralTokenPriceMin_gt: BigInt
  collateralTokenPriceMin_lt: BigInt
  collateralTokenPriceMin_gte: BigInt
  collateralTokenPriceMin_lte: BigInt
  collateralTokenPriceMin_in: [BigInt!]
  collateralTokenPriceMin_not_in: [BigInt!]
  collateralTokenPriceMax: BigInt
  collateralTokenPriceMax_not: BigInt
  collateralTokenPriceMax_gt: BigInt
  collateralTokenPriceMax_lt: BigInt
  collateralTokenPriceMax_gte: BigInt
  collateralTokenPriceMax_lte: BigInt
  collateralTokenPriceMax_in: [BigInt!]
  collateralTokenPriceMax_not_in: [BigInt!]
  sizeInUsd: BigInt
  sizeInUsd_not: BigInt
  sizeInUsd_gt: BigInt
  sizeInUsd_lt: BigInt
  sizeInUsd_gte: BigInt
  sizeInUsd_lte: BigInt
  sizeInUsd_in: [BigInt!]
  sizeInUsd_not_in: [BigInt!]
  sizeInTokens: BigInt
  sizeInTokens_not: BigInt
  sizeInTokens_gt: BigInt
  sizeInTokens_lt: BigInt
  sizeInTokens_gte: BigInt
  sizeInTokens_lte: BigInt
  sizeInTokens_in: [BigInt!]
  sizeInTokens_not_in: [BigInt!]
  collateralAmount: BigInt
  collateralAmount_not: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_lt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_not_in: [BigInt!]
  sizeDeltaUsd: BigInt
  sizeDeltaUsd_not: BigInt
  sizeDeltaUsd_gt: BigInt
  sizeDeltaUsd_lt: BigInt
  sizeDeltaUsd_gte: BigInt
  sizeDeltaUsd_lte: BigInt
  sizeDeltaUsd_in: [BigInt!]
  sizeDeltaUsd_not_in: [BigInt!]
  sizeDeltaInTokens: BigInt
  sizeDeltaInTokens_not: BigInt
  sizeDeltaInTokens_gt: BigInt
  sizeDeltaInTokens_lt: BigInt
  sizeDeltaInTokens_gte: BigInt
  sizeDeltaInTokens_lte: BigInt
  sizeDeltaInTokens_in: [BigInt!]
  sizeDeltaInTokens_not_in: [BigInt!]
  collateralDeltaAmount: BigInt
  collateralDeltaAmount_not: BigInt
  collateralDeltaAmount_gt: BigInt
  collateralDeltaAmount_lt: BigInt
  collateralDeltaAmount_gte: BigInt
  collateralDeltaAmount_lte: BigInt
  collateralDeltaAmount_in: [BigInt!]
  collateralDeltaAmount_not_in: [BigInt!]
  executionPrice: BigInt
  executionPrice_not: BigInt
  executionPrice_gt: BigInt
  executionPrice_lt: BigInt
  executionPrice_gte: BigInt
  executionPrice_lte: BigInt
  executionPrice_in: [BigInt!]
  executionPrice_not_in: [BigInt!]
  priceImpactDiffUsd: BigInt
  priceImpactDiffUsd_not: BigInt
  priceImpactDiffUsd_gt: BigInt
  priceImpactDiffUsd_lt: BigInt
  priceImpactDiffUsd_gte: BigInt
  priceImpactDiffUsd_lte: BigInt
  priceImpactDiffUsd_in: [BigInt!]
  priceImpactDiffUsd_not_in: [BigInt!]
  orderType: BigInt
  orderType_not: BigInt
  orderType_gt: BigInt
  orderType_lt: BigInt
  orderType_gte: BigInt
  orderType_lte: BigInt
  orderType_in: [BigInt!]
  orderType_not_in: [BigInt!]
  borrowingFactor: BigInt
  borrowingFactor_not: BigInt
  borrowingFactor_gt: BigInt
  borrowingFactor_lt: BigInt
  borrowingFactor_gte: BigInt
  borrowingFactor_lte: BigInt
  borrowingFactor_in: [BigInt!]
  borrowingFactor_not_in: [BigInt!]
  longTokenFundingAmountPerSize: BigInt
  longTokenFundingAmountPerSize_not: BigInt
  longTokenFundingAmountPerSize_gt: BigInt
  longTokenFundingAmountPerSize_lt: BigInt
  longTokenFundingAmountPerSize_gte: BigInt
  longTokenFundingAmountPerSize_lte: BigInt
  longTokenFundingAmountPerSize_in: [BigInt!]
  longTokenFundingAmountPerSize_not_in: [BigInt!]
  shortTokenFundingAmountPerSize: BigInt
  shortTokenFundingAmountPerSize_not: BigInt
  shortTokenFundingAmountPerSize_gt: BigInt
  shortTokenFundingAmountPerSize_lt: BigInt
  shortTokenFundingAmountPerSize_gte: BigInt
  shortTokenFundingAmountPerSize_lte: BigInt
  shortTokenFundingAmountPerSize_in: [BigInt!]
  shortTokenFundingAmountPerSize_not_in: [BigInt!]
  priceImpactAmount: BigInt
  priceImpactAmount_not: BigInt
  priceImpactAmount_gt: BigInt
  priceImpactAmount_lt: BigInt
  priceImpactAmount_gte: BigInt
  priceImpactAmount_lte: BigInt
  priceImpactAmount_in: [BigInt!]
  priceImpactAmount_not_in: [BigInt!]
  priceImpactUsd: BigInt
  priceImpactUsd_not: BigInt
  priceImpactUsd_gt: BigInt
  priceImpactUsd_lt: BigInt
  priceImpactUsd_gte: BigInt
  priceImpactUsd_lte: BigInt
  priceImpactUsd_in: [BigInt!]
  priceImpactUsd_not_in: [BigInt!]
  basePnlUsd: BigInt
  basePnlUsd_not: BigInt
  basePnlUsd_gt: BigInt
  basePnlUsd_lt: BigInt
  basePnlUsd_gte: BigInt
  basePnlUsd_lte: BigInt
  basePnlUsd_in: [BigInt!]
  basePnlUsd_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionIncrease_filter]
  or: [PositionIncrease_filter]
}

enum PositionIncrease_orderBy {
  id
  orderKey
  positionKey
  account
  marketAddress
  collateralTokenAddress
  collateralTokenPriceMin
  collateralTokenPriceMax
  sizeInUsd
  sizeInTokens
  collateralAmount
  sizeDeltaUsd
  sizeDeltaInTokens
  collateralDeltaAmount
  executionPrice
  priceImpactDiffUsd
  orderType
  borrowingFactor
  longTokenFundingAmountPerSize
  shortTokenFundingAmountPerSize
  priceImpactAmount
  priceImpactUsd
  basePnlUsd
  isLong
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type PositionVolumeInfo {
  id: ID!
  period: String!
  collateralToken: String!
  indexToken: String!
  timestamp: Int!
  volumeUsd: BigInt!
}

input PositionVolumeInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  indexToken: String
  indexToken_not: String
  indexToken_gt: String
  indexToken_lt: String
  indexToken_gte: String
  indexToken_lte: String
  indexToken_in: [String!]
  indexToken_not_in: [String!]
  indexToken_contains: String
  indexToken_contains_nocase: String
  indexToken_not_contains: String
  indexToken_not_contains_nocase: String
  indexToken_starts_with: String
  indexToken_starts_with_nocase: String
  indexToken_not_starts_with: String
  indexToken_not_starts_with_nocase: String
  indexToken_ends_with: String
  indexToken_ends_with_nocase: String
  indexToken_not_ends_with: String
  indexToken_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  volumeUsd: BigInt
  volumeUsd_not: BigInt
  volumeUsd_gt: BigInt
  volumeUsd_lt: BigInt
  volumeUsd_gte: BigInt
  volumeUsd_lte: BigInt
  volumeUsd_in: [BigInt!]
  volumeUsd_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionVolumeInfo_filter]
  or: [PositionVolumeInfo_filter]
}

enum PositionVolumeInfo_orderBy {
  id
  period
  collateralToken
  indexToken
  timestamp
  volumeUsd
}

type Query {
  affiliateRewardUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AffiliateRewardUpdate
  affiliateRewardUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: AffiliateRewardUpdate_orderBy
    orderDirection: OrderDirection
    where: AffiliateRewardUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AffiliateRewardUpdate!]!
  order(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  positionIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionIncrease
  positionIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionIncrease_orderBy
    orderDirection: OrderDirection
    where: PositionIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionIncrease!]!
  positionDecrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionDecrease
  positionDecreases(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionDecrease_orderBy
    orderDirection: OrderDirection
    where: PositionDecrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionDecrease!]!
  positionFeesInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionFeesInfo
  positionFeesInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionFeesInfo_orderBy
    orderDirection: OrderDirection
    where: PositionFeesInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionFeesInfo!]!
  swapInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapInfo
  swapInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapInfo_orderBy
    orderDirection: OrderDirection
    where: SwapInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapInfo!]!
  swapFeesInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapFeesInfo
  swapFeesInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapFeesInfo_orderBy
    orderDirection: OrderDirection
    where: SwapFeesInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapFeesInfo!]!
  collectedMarketFeesInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectedMarketFeesInfo
  collectedMarketFeesInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: CollectedMarketFeesInfo_orderBy
    orderDirection: OrderDirection
    where: CollectedMarketFeesInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollectedMarketFeesInfo!]!
  userGmTokensBalanceChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserGmTokensBalanceChange
  userGmTokensBalanceChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: UserGmTokensBalanceChange_orderBy
    orderDirection: OrderDirection
    where: UserGmTokensBalanceChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserGmTokensBalanceChange!]!
  latestUserGmTokensBalanceChangeRef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LatestUserGmTokensBalanceChangeRef
  latestUserGmTokensBalanceChangeRefs(
    skip: Int = 0
    first: Int = 100
    orderBy: LatestUserGmTokensBalanceChangeRef_orderBy
    orderDirection: OrderDirection
    where: LatestUserGmTokensBalanceChangeRef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LatestUserGmTokensBalanceChangeRef!]!
  tradeAction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradeAction
  tradeActions(
    skip: Int = 0
    first: Int = 100
    orderBy: TradeAction_orderBy
    orderDirection: OrderDirection
    where: TradeAction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradeAction!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  claimCollateralAction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimCollateralAction
  claimCollateralActions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimCollateralAction_orderBy
    orderDirection: OrderDirection
    where: ClaimCollateralAction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimCollateralAction!]!
  claimAction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimAction
  claimActions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimAction_orderBy
    orderDirection: OrderDirection
    where: ClaimAction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimAction!]!
  claimRef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimRef
  claimRefs(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRef_orderBy
    orderDirection: OrderDirection
    where: ClaimRef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimRef!]!
  poolAmountUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolAmountUpdate
  poolAmountUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolAmountUpdate_orderBy
    orderDirection: OrderDirection
    where: PoolAmountUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolAmountUpdate!]!
  claimableFundingFeeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimableFundingFeeInfo
  claimableFundingFeeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimableFundingFeeInfo_orderBy
    orderDirection: OrderDirection
    where: ClaimableFundingFeeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimableFundingFeeInfo!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  marketInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketInfo
  marketInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketInfo_orderBy
    orderDirection: OrderDirection
    where: MarketInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketInfo!]!
  depositRef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositRef
  depositRefs(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositRef_orderBy
    orderDirection: OrderDirection
    where: DepositRef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositRef!]!
  volumeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VolumeInfo
  volumeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: VolumeInfo_orderBy
    orderDirection: OrderDirection
    where: VolumeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VolumeInfo!]!
  swapVolumeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapVolumeInfo
  swapVolumeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapVolumeInfo_orderBy
    orderDirection: OrderDirection
    where: SwapVolumeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapVolumeInfo!]!
  positionVolumeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionVolumeInfo
  positionVolumeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionVolumeInfo_orderBy
    orderDirection: OrderDirection
    where: PositionVolumeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionVolumeInfo!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  userStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserStat
  userStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserStat_orderBy
    orderDirection: OrderDirection
    where: UserStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserStat!]!
  swapFeesInfoWithPeriod(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapFeesInfoWithPeriod
  swapFeesInfoWithPeriods(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapFeesInfoWithPeriod_orderBy
    orderDirection: OrderDirection
    where: SwapFeesInfoWithPeriod_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapFeesInfoWithPeriod!]!
  positionFeesInfoWithPeriod(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionFeesInfoWithPeriod
  positionFeesInfoWithPeriods(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionFeesInfoWithPeriod_orderBy
    orderDirection: OrderDirection
    where: PositionFeesInfoWithPeriod_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionFeesInfoWithPeriod!]!
  liquidityProviderIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityProviderIncentivesStat
  liquidityProviderIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityProviderIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: LiquidityProviderIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityProviderIncentivesStat!]!
  marketIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketIncentivesStat
  marketIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: MarketIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketIncentivesStat!]!
  userMarketInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserMarketInfo
  userMarketInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: UserMarketInfo_orderBy
    orderDirection: OrderDirection
    where: UserMarketInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserMarketInfo!]!
  sellUSDG(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SellUSDG
  sellUSDGs(
    skip: Int = 0
    first: Int = 100
    orderBy: SellUSDG_orderBy
    orderDirection: OrderDirection
    where: SellUSDG_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SellUSDG!]!
  userGlpGmMigrationStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserGlpGmMigrationStat
  userGlpGmMigrationStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserGlpGmMigrationStat_orderBy
    orderDirection: OrderDirection
    where: UserGlpGmMigrationStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserGlpGmMigrationStat!]!
  glpGmMigrationStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlpGmMigrationStat
  glpGmMigrationStats(
    skip: Int = 0
    first: Int = 100
    orderBy: GlpGmMigrationStat_orderBy
    orderDirection: OrderDirection
    where: GlpGmMigrationStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlpGmMigrationStat!]!
  userTradingIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserTradingIncentivesStat
  userTradingIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserTradingIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: UserTradingIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserTradingIncentivesStat!]!
  tradingIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradingIncentivesStat
  tradingIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: TradingIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: TradingIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradingIncentivesStat!]!
  distribution(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Distribution
  distributions(
    skip: Int = 0
    first: Int = 100
    orderBy: Distribution_orderBy
    orderDirection: OrderDirection
    where: Distribution_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Distribution!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SellUSDG {
  id: ID!
  txHash: String!
  logIndex: Int!
  feeBasisPoints: BigInt!
}

input SellUSDG_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  feeBasisPoints: BigInt
  feeBasisPoints_not: BigInt
  feeBasisPoints_gt: BigInt
  feeBasisPoints_lt: BigInt
  feeBasisPoints_gte: BigInt
  feeBasisPoints_lte: BigInt
  feeBasisPoints_in: [BigInt!]
  feeBasisPoints_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SellUSDG_filter]
  or: [SellUSDG_filter]
}

enum SellUSDG_orderBy {
  id
  txHash
  logIndex
  feeBasisPoints
}

type Subscription {
  affiliateRewardUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AffiliateRewardUpdate
  affiliateRewardUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: AffiliateRewardUpdate_orderBy
    orderDirection: OrderDirection
    where: AffiliateRewardUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AffiliateRewardUpdate!]!
  order(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  positionIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionIncrease
  positionIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionIncrease_orderBy
    orderDirection: OrderDirection
    where: PositionIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionIncrease!]!
  positionDecrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionDecrease
  positionDecreases(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionDecrease_orderBy
    orderDirection: OrderDirection
    where: PositionDecrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionDecrease!]!
  positionFeesInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionFeesInfo
  positionFeesInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionFeesInfo_orderBy
    orderDirection: OrderDirection
    where: PositionFeesInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionFeesInfo!]!
  swapInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapInfo
  swapInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapInfo_orderBy
    orderDirection: OrderDirection
    where: SwapInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapInfo!]!
  swapFeesInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapFeesInfo
  swapFeesInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapFeesInfo_orderBy
    orderDirection: OrderDirection
    where: SwapFeesInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapFeesInfo!]!
  collectedMarketFeesInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectedMarketFeesInfo
  collectedMarketFeesInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: CollectedMarketFeesInfo_orderBy
    orderDirection: OrderDirection
    where: CollectedMarketFeesInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollectedMarketFeesInfo!]!
  userGmTokensBalanceChange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserGmTokensBalanceChange
  userGmTokensBalanceChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: UserGmTokensBalanceChange_orderBy
    orderDirection: OrderDirection
    where: UserGmTokensBalanceChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserGmTokensBalanceChange!]!
  latestUserGmTokensBalanceChangeRef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LatestUserGmTokensBalanceChangeRef
  latestUserGmTokensBalanceChangeRefs(
    skip: Int = 0
    first: Int = 100
    orderBy: LatestUserGmTokensBalanceChangeRef_orderBy
    orderDirection: OrderDirection
    where: LatestUserGmTokensBalanceChangeRef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LatestUserGmTokensBalanceChangeRef!]!
  tradeAction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradeAction
  tradeActions(
    skip: Int = 0
    first: Int = 100
    orderBy: TradeAction_orderBy
    orderDirection: OrderDirection
    where: TradeAction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradeAction!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  claimCollateralAction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimCollateralAction
  claimCollateralActions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimCollateralAction_orderBy
    orderDirection: OrderDirection
    where: ClaimCollateralAction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimCollateralAction!]!
  claimAction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimAction
  claimActions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimAction_orderBy
    orderDirection: OrderDirection
    where: ClaimAction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimAction!]!
  claimRef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimRef
  claimRefs(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRef_orderBy
    orderDirection: OrderDirection
    where: ClaimRef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimRef!]!
  poolAmountUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolAmountUpdate
  poolAmountUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolAmountUpdate_orderBy
    orderDirection: OrderDirection
    where: PoolAmountUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolAmountUpdate!]!
  claimableFundingFeeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimableFundingFeeInfo
  claimableFundingFeeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimableFundingFeeInfo_orderBy
    orderDirection: OrderDirection
    where: ClaimableFundingFeeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimableFundingFeeInfo!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  marketInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketInfo
  marketInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketInfo_orderBy
    orderDirection: OrderDirection
    where: MarketInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketInfo!]!
  depositRef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositRef
  depositRefs(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositRef_orderBy
    orderDirection: OrderDirection
    where: DepositRef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositRef!]!
  volumeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VolumeInfo
  volumeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: VolumeInfo_orderBy
    orderDirection: OrderDirection
    where: VolumeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VolumeInfo!]!
  swapVolumeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapVolumeInfo
  swapVolumeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapVolumeInfo_orderBy
    orderDirection: OrderDirection
    where: SwapVolumeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapVolumeInfo!]!
  positionVolumeInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionVolumeInfo
  positionVolumeInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionVolumeInfo_orderBy
    orderDirection: OrderDirection
    where: PositionVolumeInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionVolumeInfo!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  userStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserStat
  userStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserStat_orderBy
    orderDirection: OrderDirection
    where: UserStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserStat!]!
  swapFeesInfoWithPeriod(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapFeesInfoWithPeriod
  swapFeesInfoWithPeriods(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapFeesInfoWithPeriod_orderBy
    orderDirection: OrderDirection
    where: SwapFeesInfoWithPeriod_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapFeesInfoWithPeriod!]!
  positionFeesInfoWithPeriod(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionFeesInfoWithPeriod
  positionFeesInfoWithPeriods(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionFeesInfoWithPeriod_orderBy
    orderDirection: OrderDirection
    where: PositionFeesInfoWithPeriod_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionFeesInfoWithPeriod!]!
  liquidityProviderIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityProviderIncentivesStat
  liquidityProviderIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityProviderIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: LiquidityProviderIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityProviderIncentivesStat!]!
  marketIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketIncentivesStat
  marketIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: MarketIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketIncentivesStat!]!
  userMarketInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserMarketInfo
  userMarketInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: UserMarketInfo_orderBy
    orderDirection: OrderDirection
    where: UserMarketInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserMarketInfo!]!
  sellUSDG(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SellUSDG
  sellUSDGs(
    skip: Int = 0
    first: Int = 100
    orderBy: SellUSDG_orderBy
    orderDirection: OrderDirection
    where: SellUSDG_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SellUSDG!]!
  userGlpGmMigrationStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserGlpGmMigrationStat
  userGlpGmMigrationStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserGlpGmMigrationStat_orderBy
    orderDirection: OrderDirection
    where: UserGlpGmMigrationStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserGlpGmMigrationStat!]!
  glpGmMigrationStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlpGmMigrationStat
  glpGmMigrationStats(
    skip: Int = 0
    first: Int = 100
    orderBy: GlpGmMigrationStat_orderBy
    orderDirection: OrderDirection
    where: GlpGmMigrationStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlpGmMigrationStat!]!
  userTradingIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserTradingIncentivesStat
  userTradingIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserTradingIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: UserTradingIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserTradingIncentivesStat!]!
  tradingIncentivesStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradingIncentivesStat
  tradingIncentivesStats(
    skip: Int = 0
    first: Int = 100
    orderBy: TradingIncentivesStat_orderBy
    orderDirection: OrderDirection
    where: TradingIncentivesStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradingIncentivesStat!]!
  distribution(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Distribution
  distributions(
    skip: Int = 0
    first: Int = 100
    orderBy: Distribution_orderBy
    orderDirection: OrderDirection
    where: Distribution_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Distribution!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SwapFeesInfo {
  id: ID!
  marketAddress: String!
  tokenAddress: String!
  swapFeeType: String!
  tokenPrice: BigInt!
  feeReceiverAmount: BigInt!
  feeUsdForPool: BigInt!
  transaction: Transaction!
}

type SwapFeesInfoWithPeriod {
  id: ID!
  period: String!
  totalFeeReceiverUsd: BigInt!
  totalFeeUsdForPool: BigInt!
}

input SwapFeesInfoWithPeriod_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  totalFeeReceiverUsd: BigInt
  totalFeeReceiverUsd_not: BigInt
  totalFeeReceiverUsd_gt: BigInt
  totalFeeReceiverUsd_lt: BigInt
  totalFeeReceiverUsd_gte: BigInt
  totalFeeReceiverUsd_lte: BigInt
  totalFeeReceiverUsd_in: [BigInt!]
  totalFeeReceiverUsd_not_in: [BigInt!]
  totalFeeUsdForPool: BigInt
  totalFeeUsdForPool_not: BigInt
  totalFeeUsdForPool_gt: BigInt
  totalFeeUsdForPool_lt: BigInt
  totalFeeUsdForPool_gte: BigInt
  totalFeeUsdForPool_lte: BigInt
  totalFeeUsdForPool_in: [BigInt!]
  totalFeeUsdForPool_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapFeesInfoWithPeriod_filter]
  or: [SwapFeesInfoWithPeriod_filter]
}

enum SwapFeesInfoWithPeriod_orderBy {
  id
  period
  totalFeeReceiverUsd
  totalFeeUsdForPool
}

input SwapFeesInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  swapFeeType: String
  swapFeeType_not: String
  swapFeeType_gt: String
  swapFeeType_lt: String
  swapFeeType_gte: String
  swapFeeType_lte: String
  swapFeeType_in: [String!]
  swapFeeType_not_in: [String!]
  swapFeeType_contains: String
  swapFeeType_contains_nocase: String
  swapFeeType_not_contains: String
  swapFeeType_not_contains_nocase: String
  swapFeeType_starts_with: String
  swapFeeType_starts_with_nocase: String
  swapFeeType_not_starts_with: String
  swapFeeType_not_starts_with_nocase: String
  swapFeeType_ends_with: String
  swapFeeType_ends_with_nocase: String
  swapFeeType_not_ends_with: String
  swapFeeType_not_ends_with_nocase: String
  tokenPrice: BigInt
  tokenPrice_not: BigInt
  tokenPrice_gt: BigInt
  tokenPrice_lt: BigInt
  tokenPrice_gte: BigInt
  tokenPrice_lte: BigInt
  tokenPrice_in: [BigInt!]
  tokenPrice_not_in: [BigInt!]
  feeReceiverAmount: BigInt
  feeReceiverAmount_not: BigInt
  feeReceiverAmount_gt: BigInt
  feeReceiverAmount_lt: BigInt
  feeReceiverAmount_gte: BigInt
  feeReceiverAmount_lte: BigInt
  feeReceiverAmount_in: [BigInt!]
  feeReceiverAmount_not_in: [BigInt!]
  feeUsdForPool: BigInt
  feeUsdForPool_not: BigInt
  feeUsdForPool_gt: BigInt
  feeUsdForPool_lt: BigInt
  feeUsdForPool_gte: BigInt
  feeUsdForPool_lte: BigInt
  feeUsdForPool_in: [BigInt!]
  feeUsdForPool_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapFeesInfo_filter]
  or: [SwapFeesInfo_filter]
}

enum SwapFeesInfo_orderBy {
  id
  marketAddress
  tokenAddress
  swapFeeType
  tokenPrice
  feeReceiverAmount
  feeUsdForPool
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type SwapInfo {
  id: ID!
  orderKey: String!
  receiver: String!
  marketAddress: String!
  tokenInAddress: String!
  tokenOutAddress: String!
  tokenInPrice: BigInt!
  tokenOutPrice: BigInt!
  amountIn: BigInt!
  amountInAfterFees: BigInt!
  amountOut: BigInt!
  priceImpactUsd: BigInt!
  transaction: Transaction!
}

input SwapInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orderKey: String
  orderKey_not: String
  orderKey_gt: String
  orderKey_lt: String
  orderKey_gte: String
  orderKey_lte: String
  orderKey_in: [String!]
  orderKey_not_in: [String!]
  orderKey_contains: String
  orderKey_contains_nocase: String
  orderKey_not_contains: String
  orderKey_not_contains_nocase: String
  orderKey_starts_with: String
  orderKey_starts_with_nocase: String
  orderKey_not_starts_with: String
  orderKey_not_starts_with_nocase: String
  orderKey_ends_with: String
  orderKey_ends_with_nocase: String
  orderKey_not_ends_with: String
  orderKey_not_ends_with_nocase: String
  receiver: String
  receiver_not: String
  receiver_gt: String
  receiver_lt: String
  receiver_gte: String
  receiver_lte: String
  receiver_in: [String!]
  receiver_not_in: [String!]
  receiver_contains: String
  receiver_contains_nocase: String
  receiver_not_contains: String
  receiver_not_contains_nocase: String
  receiver_starts_with: String
  receiver_starts_with_nocase: String
  receiver_not_starts_with: String
  receiver_not_starts_with_nocase: String
  receiver_ends_with: String
  receiver_ends_with_nocase: String
  receiver_not_ends_with: String
  receiver_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  tokenInAddress: String
  tokenInAddress_not: String
  tokenInAddress_gt: String
  tokenInAddress_lt: String
  tokenInAddress_gte: String
  tokenInAddress_lte: String
  tokenInAddress_in: [String!]
  tokenInAddress_not_in: [String!]
  tokenInAddress_contains: String
  tokenInAddress_contains_nocase: String
  tokenInAddress_not_contains: String
  tokenInAddress_not_contains_nocase: String
  tokenInAddress_starts_with: String
  tokenInAddress_starts_with_nocase: String
  tokenInAddress_not_starts_with: String
  tokenInAddress_not_starts_with_nocase: String
  tokenInAddress_ends_with: String
  tokenInAddress_ends_with_nocase: String
  tokenInAddress_not_ends_with: String
  tokenInAddress_not_ends_with_nocase: String
  tokenOutAddress: String
  tokenOutAddress_not: String
  tokenOutAddress_gt: String
  tokenOutAddress_lt: String
  tokenOutAddress_gte: String
  tokenOutAddress_lte: String
  tokenOutAddress_in: [String!]
  tokenOutAddress_not_in: [String!]
  tokenOutAddress_contains: String
  tokenOutAddress_contains_nocase: String
  tokenOutAddress_not_contains: String
  tokenOutAddress_not_contains_nocase: String
  tokenOutAddress_starts_with: String
  tokenOutAddress_starts_with_nocase: String
  tokenOutAddress_not_starts_with: String
  tokenOutAddress_not_starts_with_nocase: String
  tokenOutAddress_ends_with: String
  tokenOutAddress_ends_with_nocase: String
  tokenOutAddress_not_ends_with: String
  tokenOutAddress_not_ends_with_nocase: String
  tokenInPrice: BigInt
  tokenInPrice_not: BigInt
  tokenInPrice_gt: BigInt
  tokenInPrice_lt: BigInt
  tokenInPrice_gte: BigInt
  tokenInPrice_lte: BigInt
  tokenInPrice_in: [BigInt!]
  tokenInPrice_not_in: [BigInt!]
  tokenOutPrice: BigInt
  tokenOutPrice_not: BigInt
  tokenOutPrice_gt: BigInt
  tokenOutPrice_lt: BigInt
  tokenOutPrice_gte: BigInt
  tokenOutPrice_lte: BigInt
  tokenOutPrice_in: [BigInt!]
  tokenOutPrice_not_in: [BigInt!]
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountInAfterFees: BigInt
  amountInAfterFees_not: BigInt
  amountInAfterFees_gt: BigInt
  amountInAfterFees_lt: BigInt
  amountInAfterFees_gte: BigInt
  amountInAfterFees_lte: BigInt
  amountInAfterFees_in: [BigInt!]
  amountInAfterFees_not_in: [BigInt!]
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  priceImpactUsd: BigInt
  priceImpactUsd_not: BigInt
  priceImpactUsd_gt: BigInt
  priceImpactUsd_lt: BigInt
  priceImpactUsd_gte: BigInt
  priceImpactUsd_lte: BigInt
  priceImpactUsd_in: [BigInt!]
  priceImpactUsd_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapInfo_filter]
  or: [SwapInfo_filter]
}

enum SwapInfo_orderBy {
  id
  orderKey
  receiver
  marketAddress
  tokenInAddress
  tokenOutAddress
  tokenInPrice
  tokenOutPrice
  amountIn
  amountInAfterFees
  amountOut
  priceImpactUsd
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type SwapVolumeInfo {
  id: ID!
  period: String!
  tokenIn: String!
  tokenOut: String!
  timestamp: Int!
  volumeUsd: BigInt!
}

input SwapVolumeInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  volumeUsd: BigInt
  volumeUsd_not: BigInt
  volumeUsd_gt: BigInt
  volumeUsd_lt: BigInt
  volumeUsd_gte: BigInt
  volumeUsd_lte: BigInt
  volumeUsd_in: [BigInt!]
  volumeUsd_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapVolumeInfo_filter]
  or: [SwapVolumeInfo_filter]
}

enum SwapVolumeInfo_orderBy {
  id
  period
  tokenIn
  tokenOut
  timestamp
  volumeUsd
}

type TokenPrice {
  id: ID!
  minPrice: BigInt!
  maxPrice: BigInt!
}

input TokenPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  minPrice: BigInt
  minPrice_not: BigInt
  minPrice_gt: BigInt
  minPrice_lt: BigInt
  minPrice_gte: BigInt
  minPrice_lte: BigInt
  minPrice_in: [BigInt!]
  minPrice_not_in: [BigInt!]
  maxPrice: BigInt
  maxPrice_not: BigInt
  maxPrice_gt: BigInt
  maxPrice_lt: BigInt
  maxPrice_gte: BigInt
  maxPrice_lte: BigInt
  maxPrice_in: [BigInt!]
  maxPrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenPrice_filter]
  or: [TokenPrice_filter]
}

enum TokenPrice_orderBy {
  id
  minPrice
  maxPrice
}

type TradeAction {
  id: ID!
  eventName: String!
  orderKey: String!
  orderType: BigInt!
  account: String!
  marketAddress: String
  swapPath: [String!]
  initialCollateralTokenAddress: String!
  initialCollateralDeltaAmount: BigInt!
  sizeDeltaUsd: BigInt
  triggerPrice: BigInt
  acceptablePrice: BigInt
  executionPrice: BigInt
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMax: BigInt
  indexTokenPriceMin: BigInt
  indexTokenPriceMax: BigInt
  priceImpactDiffUsd: BigInt
  priceImpactUsd: BigInt
  priceImpactAmount: BigInt
  positionFeeAmount: BigInt
  borrowingFeeAmount: BigInt
  fundingFeeAmount: BigInt
  pnlUsd: BigInt
  isLong: Boolean
  minOutputAmount: BigInt
  executionAmountOut: BigInt
  shouldUnwrapNativeToken: Boolean
  reason: String
  reasonBytes: Bytes
  transaction: Transaction!
}

enum TradeActionType {
  OrderCreated
  OrderCancelled
  OrderExecuted
  OrderFrozen
  OrderUpdated
}

input TradeAction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  eventName: String
  eventName_not: String
  eventName_gt: String
  eventName_lt: String
  eventName_gte: String
  eventName_lte: String
  eventName_in: [String!]
  eventName_not_in: [String!]
  eventName_contains: String
  eventName_contains_nocase: String
  eventName_not_contains: String
  eventName_not_contains_nocase: String
  eventName_starts_with: String
  eventName_starts_with_nocase: String
  eventName_not_starts_with: String
  eventName_not_starts_with_nocase: String
  eventName_ends_with: String
  eventName_ends_with_nocase: String
  eventName_not_ends_with: String
  eventName_not_ends_with_nocase: String
  orderKey: String
  orderKey_not: String
  orderKey_gt: String
  orderKey_lt: String
  orderKey_gte: String
  orderKey_lte: String
  orderKey_in: [String!]
  orderKey_not_in: [String!]
  orderKey_contains: String
  orderKey_contains_nocase: String
  orderKey_not_contains: String
  orderKey_not_contains_nocase: String
  orderKey_starts_with: String
  orderKey_starts_with_nocase: String
  orderKey_not_starts_with: String
  orderKey_not_starts_with_nocase: String
  orderKey_ends_with: String
  orderKey_ends_with_nocase: String
  orderKey_not_ends_with: String
  orderKey_not_ends_with_nocase: String
  orderType: BigInt
  orderType_not: BigInt
  orderType_gt: BigInt
  orderType_lt: BigInt
  orderType_gte: BigInt
  orderType_lte: BigInt
  orderType_in: [BigInt!]
  orderType_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  swapPath: [String!]
  swapPath_not: [String!]
  swapPath_contains: [String!]
  swapPath_contains_nocase: [String!]
  swapPath_not_contains: [String!]
  swapPath_not_contains_nocase: [String!]
  initialCollateralTokenAddress: String
  initialCollateralTokenAddress_not: String
  initialCollateralTokenAddress_gt: String
  initialCollateralTokenAddress_lt: String
  initialCollateralTokenAddress_gte: String
  initialCollateralTokenAddress_lte: String
  initialCollateralTokenAddress_in: [String!]
  initialCollateralTokenAddress_not_in: [String!]
  initialCollateralTokenAddress_contains: String
  initialCollateralTokenAddress_contains_nocase: String
  initialCollateralTokenAddress_not_contains: String
  initialCollateralTokenAddress_not_contains_nocase: String
  initialCollateralTokenAddress_starts_with: String
  initialCollateralTokenAddress_starts_with_nocase: String
  initialCollateralTokenAddress_not_starts_with: String
  initialCollateralTokenAddress_not_starts_with_nocase: String
  initialCollateralTokenAddress_ends_with: String
  initialCollateralTokenAddress_ends_with_nocase: String
  initialCollateralTokenAddress_not_ends_with: String
  initialCollateralTokenAddress_not_ends_with_nocase: String
  initialCollateralDeltaAmount: BigInt
  initialCollateralDeltaAmount_not: BigInt
  initialCollateralDeltaAmount_gt: BigInt
  initialCollateralDeltaAmount_lt: BigInt
  initialCollateralDeltaAmount_gte: BigInt
  initialCollateralDeltaAmount_lte: BigInt
  initialCollateralDeltaAmount_in: [BigInt!]
  initialCollateralDeltaAmount_not_in: [BigInt!]
  sizeDeltaUsd: BigInt
  sizeDeltaUsd_not: BigInt
  sizeDeltaUsd_gt: BigInt
  sizeDeltaUsd_lt: BigInt
  sizeDeltaUsd_gte: BigInt
  sizeDeltaUsd_lte: BigInt
  sizeDeltaUsd_in: [BigInt!]
  sizeDeltaUsd_not_in: [BigInt!]
  triggerPrice: BigInt
  triggerPrice_not: BigInt
  triggerPrice_gt: BigInt
  triggerPrice_lt: BigInt
  triggerPrice_gte: BigInt
  triggerPrice_lte: BigInt
  triggerPrice_in: [BigInt!]
  triggerPrice_not_in: [BigInt!]
  acceptablePrice: BigInt
  acceptablePrice_not: BigInt
  acceptablePrice_gt: BigInt
  acceptablePrice_lt: BigInt
  acceptablePrice_gte: BigInt
  acceptablePrice_lte: BigInt
  acceptablePrice_in: [BigInt!]
  acceptablePrice_not_in: [BigInt!]
  executionPrice: BigInt
  executionPrice_not: BigInt
  executionPrice_gt: BigInt
  executionPrice_lt: BigInt
  executionPrice_gte: BigInt
  executionPrice_lte: BigInt
  executionPrice_in: [BigInt!]
  executionPrice_not_in: [BigInt!]
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMin_not: BigInt
  collateralTokenPriceMin_gt: BigInt
  collateralTokenPriceMin_lt: BigInt
  collateralTokenPriceMin_gte: BigInt
  collateralTokenPriceMin_lte: BigInt
  collateralTokenPriceMin_in: [BigInt!]
  collateralTokenPriceMin_not_in: [BigInt!]
  collateralTokenPriceMax: BigInt
  collateralTokenPriceMax_not: BigInt
  collateralTokenPriceMax_gt: BigInt
  collateralTokenPriceMax_lt: BigInt
  collateralTokenPriceMax_gte: BigInt
  collateralTokenPriceMax_lte: BigInt
  collateralTokenPriceMax_in: [BigInt!]
  collateralTokenPriceMax_not_in: [BigInt!]
  indexTokenPriceMin: BigInt
  indexTokenPriceMin_not: BigInt
  indexTokenPriceMin_gt: BigInt
  indexTokenPriceMin_lt: BigInt
  indexTokenPriceMin_gte: BigInt
  indexTokenPriceMin_lte: BigInt
  indexTokenPriceMin_in: [BigInt!]
  indexTokenPriceMin_not_in: [BigInt!]
  indexTokenPriceMax: BigInt
  indexTokenPriceMax_not: BigInt
  indexTokenPriceMax_gt: BigInt
  indexTokenPriceMax_lt: BigInt
  indexTokenPriceMax_gte: BigInt
  indexTokenPriceMax_lte: BigInt
  indexTokenPriceMax_in: [BigInt!]
  indexTokenPriceMax_not_in: [BigInt!]
  priceImpactDiffUsd: BigInt
  priceImpactDiffUsd_not: BigInt
  priceImpactDiffUsd_gt: BigInt
  priceImpactDiffUsd_lt: BigInt
  priceImpactDiffUsd_gte: BigInt
  priceImpactDiffUsd_lte: BigInt
  priceImpactDiffUsd_in: [BigInt!]
  priceImpactDiffUsd_not_in: [BigInt!]
  priceImpactUsd: BigInt
  priceImpactUsd_not: BigInt
  priceImpactUsd_gt: BigInt
  priceImpactUsd_lt: BigInt
  priceImpactUsd_gte: BigInt
  priceImpactUsd_lte: BigInt
  priceImpactUsd_in: [BigInt!]
  priceImpactUsd_not_in: [BigInt!]
  priceImpactAmount: BigInt
  priceImpactAmount_not: BigInt
  priceImpactAmount_gt: BigInt
  priceImpactAmount_lt: BigInt
  priceImpactAmount_gte: BigInt
  priceImpactAmount_lte: BigInt
  priceImpactAmount_in: [BigInt!]
  priceImpactAmount_not_in: [BigInt!]
  positionFeeAmount: BigInt
  positionFeeAmount_not: BigInt
  positionFeeAmount_gt: BigInt
  positionFeeAmount_lt: BigInt
  positionFeeAmount_gte: BigInt
  positionFeeAmount_lte: BigInt
  positionFeeAmount_in: [BigInt!]
  positionFeeAmount_not_in: [BigInt!]
  borrowingFeeAmount: BigInt
  borrowingFeeAmount_not: BigInt
  borrowingFeeAmount_gt: BigInt
  borrowingFeeAmount_lt: BigInt
  borrowingFeeAmount_gte: BigInt
  borrowingFeeAmount_lte: BigInt
  borrowingFeeAmount_in: [BigInt!]
  borrowingFeeAmount_not_in: [BigInt!]
  fundingFeeAmount: BigInt
  fundingFeeAmount_not: BigInt
  fundingFeeAmount_gt: BigInt
  fundingFeeAmount_lt: BigInt
  fundingFeeAmount_gte: BigInt
  fundingFeeAmount_lte: BigInt
  fundingFeeAmount_in: [BigInt!]
  fundingFeeAmount_not_in: [BigInt!]
  pnlUsd: BigInt
  pnlUsd_not: BigInt
  pnlUsd_gt: BigInt
  pnlUsd_lt: BigInt
  pnlUsd_gte: BigInt
  pnlUsd_lte: BigInt
  pnlUsd_in: [BigInt!]
  pnlUsd_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  minOutputAmount: BigInt
  minOutputAmount_not: BigInt
  minOutputAmount_gt: BigInt
  minOutputAmount_lt: BigInt
  minOutputAmount_gte: BigInt
  minOutputAmount_lte: BigInt
  minOutputAmount_in: [BigInt!]
  minOutputAmount_not_in: [BigInt!]
  executionAmountOut: BigInt
  executionAmountOut_not: BigInt
  executionAmountOut_gt: BigInt
  executionAmountOut_lt: BigInt
  executionAmountOut_gte: BigInt
  executionAmountOut_lte: BigInt
  executionAmountOut_in: [BigInt!]
  executionAmountOut_not_in: [BigInt!]
  shouldUnwrapNativeToken: Boolean
  shouldUnwrapNativeToken_not: Boolean
  shouldUnwrapNativeToken_in: [Boolean!]
  shouldUnwrapNativeToken_not_in: [Boolean!]
  reason: String
  reason_not: String
  reason_gt: String
  reason_lt: String
  reason_gte: String
  reason_lte: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_contains: String
  reason_contains_nocase: String
  reason_not_contains: String
  reason_not_contains_nocase: String
  reason_starts_with: String
  reason_starts_with_nocase: String
  reason_not_starts_with: String
  reason_not_starts_with_nocase: String
  reason_ends_with: String
  reason_ends_with_nocase: String
  reason_not_ends_with: String
  reason_not_ends_with_nocase: String
  reasonBytes: Bytes
  reasonBytes_not: Bytes
  reasonBytes_gt: Bytes
  reasonBytes_lt: Bytes
  reasonBytes_gte: Bytes
  reasonBytes_lte: Bytes
  reasonBytes_in: [Bytes!]
  reasonBytes_not_in: [Bytes!]
  reasonBytes_contains: Bytes
  reasonBytes_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TradeAction_filter]
  or: [TradeAction_filter]
}

enum TradeAction_orderBy {
  id
  eventName
  orderKey
  orderType
  account
  marketAddress
  swapPath
  initialCollateralTokenAddress
  initialCollateralDeltaAmount
  sizeDeltaUsd
  triggerPrice
  acceptablePrice
  executionPrice
  collateralTokenPriceMin
  collateralTokenPriceMax
  indexTokenPriceMin
  indexTokenPriceMax
  priceImpactDiffUsd
  priceImpactUsd
  priceImpactAmount
  positionFeeAmount
  borrowingFeeAmount
  fundingFeeAmount
  pnlUsd
  isLong
  minOutputAmount
  executionAmountOut
  shouldUnwrapNativeToken
  reason
  reasonBytes
  transaction
  transaction__id
  transaction__from
  transaction__to
  transaction__hash
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionIndex
}

type TradingIncentivesStat {
  id: ID!
  timestamp: Int!
  period: String!
  positionFeesUsd: BigInt!
  positionFeesInArb: BigInt!
  eligibleFeesInArb: BigInt!
  eligibleFeesUsd: BigInt!
  rebatesCapInArb: BigInt!
}

input TradingIncentivesStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  positionFeesUsd: BigInt
  positionFeesUsd_not: BigInt
  positionFeesUsd_gt: BigInt
  positionFeesUsd_lt: BigInt
  positionFeesUsd_gte: BigInt
  positionFeesUsd_lte: BigInt
  positionFeesUsd_in: [BigInt!]
  positionFeesUsd_not_in: [BigInt!]
  positionFeesInArb: BigInt
  positionFeesInArb_not: BigInt
  positionFeesInArb_gt: BigInt
  positionFeesInArb_lt: BigInt
  positionFeesInArb_gte: BigInt
  positionFeesInArb_lte: BigInt
  positionFeesInArb_in: [BigInt!]
  positionFeesInArb_not_in: [BigInt!]
  eligibleFeesInArb: BigInt
  eligibleFeesInArb_not: BigInt
  eligibleFeesInArb_gt: BigInt
  eligibleFeesInArb_lt: BigInt
  eligibleFeesInArb_gte: BigInt
  eligibleFeesInArb_lte: BigInt
  eligibleFeesInArb_in: [BigInt!]
  eligibleFeesInArb_not_in: [BigInt!]
  eligibleFeesUsd: BigInt
  eligibleFeesUsd_not: BigInt
  eligibleFeesUsd_gt: BigInt
  eligibleFeesUsd_lt: BigInt
  eligibleFeesUsd_gte: BigInt
  eligibleFeesUsd_lte: BigInt
  eligibleFeesUsd_in: [BigInt!]
  eligibleFeesUsd_not_in: [BigInt!]
  rebatesCapInArb: BigInt
  rebatesCapInArb_not: BigInt
  rebatesCapInArb_gt: BigInt
  rebatesCapInArb_lt: BigInt
  rebatesCapInArb_gte: BigInt
  rebatesCapInArb_lte: BigInt
  rebatesCapInArb_in: [BigInt!]
  rebatesCapInArb_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TradingIncentivesStat_filter]
  or: [TradingIncentivesStat_filter]
}

enum TradingIncentivesStat_orderBy {
  id
  timestamp
  period
  positionFeesUsd
  positionFeesInArb
  eligibleFeesInArb
  eligibleFeesUsd
  rebatesCapInArb
}

type Transaction {
  id: ID!
  from: String!
  to: String!
  hash: String!
  timestamp: Int!
  blockNumber: Int!
  transactionIndex: Int!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionIndex: Int
  transactionIndex_not: Int
  transactionIndex_gt: Int
  transactionIndex_lt: Int
  transactionIndex_gte: Int
  transactionIndex_lte: Int
  transactionIndex_in: [Int!]
  transactionIndex_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  from
  to
  hash
  timestamp
  blockNumber
  transactionIndex
}

type User {
  id: ID!
  account: String!
  totalSwapCount: Int!
  totalPositionCount: Int!
  totalDepositCount: Int!
  totalWithdrawalCount: Int!
}

type UserGlpGmMigrationStat {
  id: ID!
  timestamp: Int!
  period: String!
  account: String!
  glpRedemptionUsd: BigInt!
  glpRedemptionFeeBpsByUsd: BigInt!
  glpRedemptionWeightedAverageFeeBps: Int!
  gmDepositUsd: BigInt!
  eligibleRedemptionInArb: BigInt!
  eligibleRedemptionUsd: BigInt!
  eligibleUpdatedTimestamp: Int!
}

input UserGlpGmMigrationStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  glpRedemptionUsd: BigInt
  glpRedemptionUsd_not: BigInt
  glpRedemptionUsd_gt: BigInt
  glpRedemptionUsd_lt: BigInt
  glpRedemptionUsd_gte: BigInt
  glpRedemptionUsd_lte: BigInt
  glpRedemptionUsd_in: [BigInt!]
  glpRedemptionUsd_not_in: [BigInt!]
  glpRedemptionFeeBpsByUsd: BigInt
  glpRedemptionFeeBpsByUsd_not: BigInt
  glpRedemptionFeeBpsByUsd_gt: BigInt
  glpRedemptionFeeBpsByUsd_lt: BigInt
  glpRedemptionFeeBpsByUsd_gte: BigInt
  glpRedemptionFeeBpsByUsd_lte: BigInt
  glpRedemptionFeeBpsByUsd_in: [BigInt!]
  glpRedemptionFeeBpsByUsd_not_in: [BigInt!]
  glpRedemptionWeightedAverageFeeBps: Int
  glpRedemptionWeightedAverageFeeBps_not: Int
  glpRedemptionWeightedAverageFeeBps_gt: Int
  glpRedemptionWeightedAverageFeeBps_lt: Int
  glpRedemptionWeightedAverageFeeBps_gte: Int
  glpRedemptionWeightedAverageFeeBps_lte: Int
  glpRedemptionWeightedAverageFeeBps_in: [Int!]
  glpRedemptionWeightedAverageFeeBps_not_in: [Int!]
  gmDepositUsd: BigInt
  gmDepositUsd_not: BigInt
  gmDepositUsd_gt: BigInt
  gmDepositUsd_lt: BigInt
  gmDepositUsd_gte: BigInt
  gmDepositUsd_lte: BigInt
  gmDepositUsd_in: [BigInt!]
  gmDepositUsd_not_in: [BigInt!]
  eligibleRedemptionInArb: BigInt
  eligibleRedemptionInArb_not: BigInt
  eligibleRedemptionInArb_gt: BigInt
  eligibleRedemptionInArb_lt: BigInt
  eligibleRedemptionInArb_gte: BigInt
  eligibleRedemptionInArb_lte: BigInt
  eligibleRedemptionInArb_in: [BigInt!]
  eligibleRedemptionInArb_not_in: [BigInt!]
  eligibleRedemptionUsd: BigInt
  eligibleRedemptionUsd_not: BigInt
  eligibleRedemptionUsd_gt: BigInt
  eligibleRedemptionUsd_lt: BigInt
  eligibleRedemptionUsd_gte: BigInt
  eligibleRedemptionUsd_lte: BigInt
  eligibleRedemptionUsd_in: [BigInt!]
  eligibleRedemptionUsd_not_in: [BigInt!]
  eligibleUpdatedTimestamp: Int
  eligibleUpdatedTimestamp_not: Int
  eligibleUpdatedTimestamp_gt: Int
  eligibleUpdatedTimestamp_lt: Int
  eligibleUpdatedTimestamp_gte: Int
  eligibleUpdatedTimestamp_lte: Int
  eligibleUpdatedTimestamp_in: [Int!]
  eligibleUpdatedTimestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserGlpGmMigrationStat_filter]
  or: [UserGlpGmMigrationStat_filter]
}

enum UserGlpGmMigrationStat_orderBy {
  id
  timestamp
  period
  account
  glpRedemptionUsd
  glpRedemptionFeeBpsByUsd
  glpRedemptionWeightedAverageFeeBps
  gmDepositUsd
  eligibleRedemptionInArb
  eligibleRedemptionUsd
  eligibleUpdatedTimestamp
}

type UserGmTokensBalanceChange {
  id: ID!
  account: String!
  marketAddress: String!
  tokensBalance: BigInt!
  timestamp: Int!
  cumulativeIncome: BigInt!
  cumulativeFeeUsdPerGmToken: BigInt!
  index: BigInt!
}

input UserGmTokensBalanceChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  tokensBalance: BigInt
  tokensBalance_not: BigInt
  tokensBalance_gt: BigInt
  tokensBalance_lt: BigInt
  tokensBalance_gte: BigInt
  tokensBalance_lte: BigInt
  tokensBalance_in: [BigInt!]
  tokensBalance_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  cumulativeIncome: BigInt
  cumulativeIncome_not: BigInt
  cumulativeIncome_gt: BigInt
  cumulativeIncome_lt: BigInt
  cumulativeIncome_gte: BigInt
  cumulativeIncome_lte: BigInt
  cumulativeIncome_in: [BigInt!]
  cumulativeIncome_not_in: [BigInt!]
  cumulativeFeeUsdPerGmToken: BigInt
  cumulativeFeeUsdPerGmToken_not: BigInt
  cumulativeFeeUsdPerGmToken_gt: BigInt
  cumulativeFeeUsdPerGmToken_lt: BigInt
  cumulativeFeeUsdPerGmToken_gte: BigInt
  cumulativeFeeUsdPerGmToken_lte: BigInt
  cumulativeFeeUsdPerGmToken_in: [BigInt!]
  cumulativeFeeUsdPerGmToken_not_in: [BigInt!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserGmTokensBalanceChange_filter]
  or: [UserGmTokensBalanceChange_filter]
}

enum UserGmTokensBalanceChange_orderBy {
  id
  account
  marketAddress
  tokensBalance
  timestamp
  cumulativeIncome
  cumulativeFeeUsdPerGmToken
  index
}

type UserMarketInfo {
  id: ID!
  marketTokensBalance: BigInt!
  account: String!
  marketAddress: String!
}

input UserMarketInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketTokensBalance: BigInt
  marketTokensBalance_not: BigInt
  marketTokensBalance_gt: BigInt
  marketTokensBalance_lt: BigInt
  marketTokensBalance_gte: BigInt
  marketTokensBalance_lte: BigInt
  marketTokensBalance_in: [BigInt!]
  marketTokensBalance_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  marketAddress: String
  marketAddress_not: String
  marketAddress_gt: String
  marketAddress_lt: String
  marketAddress_gte: String
  marketAddress_lte: String
  marketAddress_in: [String!]
  marketAddress_not_in: [String!]
  marketAddress_contains: String
  marketAddress_contains_nocase: String
  marketAddress_not_contains: String
  marketAddress_not_contains_nocase: String
  marketAddress_starts_with: String
  marketAddress_starts_with_nocase: String
  marketAddress_not_starts_with: String
  marketAddress_not_starts_with_nocase: String
  marketAddress_ends_with: String
  marketAddress_ends_with_nocase: String
  marketAddress_not_ends_with: String
  marketAddress_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserMarketInfo_filter]
  or: [UserMarketInfo_filter]
}

enum UserMarketInfo_orderBy {
  id
  marketTokensBalance
  account
  marketAddress
}

type UserStat {
  id: ID!
  totalSwapCount: Int!
  totalPositionCount: Int!
  totalDepositCount: Int!
  totalWithdrawalCount: Int!
  timestamp: Int!
  period: String!
  uniqueUsers: Int!
}

input UserStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalSwapCount: Int
  totalSwapCount_not: Int
  totalSwapCount_gt: Int
  totalSwapCount_lt: Int
  totalSwapCount_gte: Int
  totalSwapCount_lte: Int
  totalSwapCount_in: [Int!]
  totalSwapCount_not_in: [Int!]
  totalPositionCount: Int
  totalPositionCount_not: Int
  totalPositionCount_gt: Int
  totalPositionCount_lt: Int
  totalPositionCount_gte: Int
  totalPositionCount_lte: Int
  totalPositionCount_in: [Int!]
  totalPositionCount_not_in: [Int!]
  totalDepositCount: Int
  totalDepositCount_not: Int
  totalDepositCount_gt: Int
  totalDepositCount_lt: Int
  totalDepositCount_gte: Int
  totalDepositCount_lte: Int
  totalDepositCount_in: [Int!]
  totalDepositCount_not_in: [Int!]
  totalWithdrawalCount: Int
  totalWithdrawalCount_not: Int
  totalWithdrawalCount_gt: Int
  totalWithdrawalCount_lt: Int
  totalWithdrawalCount_gte: Int
  totalWithdrawalCount_lte: Int
  totalWithdrawalCount_in: [Int!]
  totalWithdrawalCount_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  uniqueUsers: Int
  uniqueUsers_not: Int
  uniqueUsers_gt: Int
  uniqueUsers_lt: Int
  uniqueUsers_gte: Int
  uniqueUsers_lte: Int
  uniqueUsers_in: [Int!]
  uniqueUsers_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserStat_filter]
  or: [UserStat_filter]
}

enum UserStat_orderBy {
  id
  totalSwapCount
  totalPositionCount
  totalDepositCount
  totalWithdrawalCount
  timestamp
  period
  uniqueUsers
}

type UserTradingIncentivesStat {
  id: ID!
  timestamp: Int!
  period: String!
  account: String!
  positionFeesUsd: BigInt!
  positionFeesInArb: BigInt!
  eligibleFeesInArb: BigInt!
  eligibleFeesUsd: BigInt!
  eligibleUpdatedTimestamp: Int!
}

input UserTradingIncentivesStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  positionFeesUsd: BigInt
  positionFeesUsd_not: BigInt
  positionFeesUsd_gt: BigInt
  positionFeesUsd_lt: BigInt
  positionFeesUsd_gte: BigInt
  positionFeesUsd_lte: BigInt
  positionFeesUsd_in: [BigInt!]
  positionFeesUsd_not_in: [BigInt!]
  positionFeesInArb: BigInt
  positionFeesInArb_not: BigInt
  positionFeesInArb_gt: BigInt
  positionFeesInArb_lt: BigInt
  positionFeesInArb_gte: BigInt
  positionFeesInArb_lte: BigInt
  positionFeesInArb_in: [BigInt!]
  positionFeesInArb_not_in: [BigInt!]
  eligibleFeesInArb: BigInt
  eligibleFeesInArb_not: BigInt
  eligibleFeesInArb_gt: BigInt
  eligibleFeesInArb_lt: BigInt
  eligibleFeesInArb_gte: BigInt
  eligibleFeesInArb_lte: BigInt
  eligibleFeesInArb_in: [BigInt!]
  eligibleFeesInArb_not_in: [BigInt!]
  eligibleFeesUsd: BigInt
  eligibleFeesUsd_not: BigInt
  eligibleFeesUsd_gt: BigInt
  eligibleFeesUsd_lt: BigInt
  eligibleFeesUsd_gte: BigInt
  eligibleFeesUsd_lte: BigInt
  eligibleFeesUsd_in: [BigInt!]
  eligibleFeesUsd_not_in: [BigInt!]
  eligibleUpdatedTimestamp: Int
  eligibleUpdatedTimestamp_not: Int
  eligibleUpdatedTimestamp_gt: Int
  eligibleUpdatedTimestamp_lt: Int
  eligibleUpdatedTimestamp_gte: Int
  eligibleUpdatedTimestamp_lte: Int
  eligibleUpdatedTimestamp_in: [Int!]
  eligibleUpdatedTimestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserTradingIncentivesStat_filter]
  or: [UserTradingIncentivesStat_filter]
}

enum UserTradingIncentivesStat_orderBy {
  id
  timestamp
  period
  account
  positionFeesUsd
  positionFeesInArb
  eligibleFeesInArb
  eligibleFeesUsd
  eligibleUpdatedTimestamp
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  totalSwapCount: Int
  totalSwapCount_not: Int
  totalSwapCount_gt: Int
  totalSwapCount_lt: Int
  totalSwapCount_gte: Int
  totalSwapCount_lte: Int
  totalSwapCount_in: [Int!]
  totalSwapCount_not_in: [Int!]
  totalPositionCount: Int
  totalPositionCount_not: Int
  totalPositionCount_gt: Int
  totalPositionCount_lt: Int
  totalPositionCount_gte: Int
  totalPositionCount_lte: Int
  totalPositionCount_in: [Int!]
  totalPositionCount_not_in: [Int!]
  totalDepositCount: Int
  totalDepositCount_not: Int
  totalDepositCount_gt: Int
  totalDepositCount_lt: Int
  totalDepositCount_gte: Int
  totalDepositCount_lte: Int
  totalDepositCount_in: [Int!]
  totalDepositCount_not_in: [Int!]
  totalWithdrawalCount: Int
  totalWithdrawalCount_not: Int
  totalWithdrawalCount_gt: Int
  totalWithdrawalCount_lt: Int
  totalWithdrawalCount_gte: Int
  totalWithdrawalCount_lte: Int
  totalWithdrawalCount_in: [Int!]
  totalWithdrawalCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  account
  totalSwapCount
  totalPositionCount
  totalDepositCount
  totalWithdrawalCount
}

type VolumeInfo {
  id: ID!
  period: String!
  volumeUsd: BigInt!
  marginVolumeUsd: BigInt!
  swapVolumeUsd: BigInt!
  depositVolumeUsd: BigInt!
  withdrawalVolumeUsd: BigInt!
  timestamp: Int!
}

input VolumeInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  period: String
  period_not: String
  period_gt: String
  period_lt: String
  period_gte: String
  period_lte: String
  period_in: [String!]
  period_not_in: [String!]
  period_contains: String
  period_contains_nocase: String
  period_not_contains: String
  period_not_contains_nocase: String
  period_starts_with: String
  period_starts_with_nocase: String
  period_not_starts_with: String
  period_not_starts_with_nocase: String
  period_ends_with: String
  period_ends_with_nocase: String
  period_not_ends_with: String
  period_not_ends_with_nocase: String
  volumeUsd: BigInt
  volumeUsd_not: BigInt
  volumeUsd_gt: BigInt
  volumeUsd_lt: BigInt
  volumeUsd_gte: BigInt
  volumeUsd_lte: BigInt
  volumeUsd_in: [BigInt!]
  volumeUsd_not_in: [BigInt!]
  marginVolumeUsd: BigInt
  marginVolumeUsd_not: BigInt
  marginVolumeUsd_gt: BigInt
  marginVolumeUsd_lt: BigInt
  marginVolumeUsd_gte: BigInt
  marginVolumeUsd_lte: BigInt
  marginVolumeUsd_in: [BigInt!]
  marginVolumeUsd_not_in: [BigInt!]
  swapVolumeUsd: BigInt
  swapVolumeUsd_not: BigInt
  swapVolumeUsd_gt: BigInt
  swapVolumeUsd_lt: BigInt
  swapVolumeUsd_gte: BigInt
  swapVolumeUsd_lte: BigInt
  swapVolumeUsd_in: [BigInt!]
  swapVolumeUsd_not_in: [BigInt!]
  depositVolumeUsd: BigInt
  depositVolumeUsd_not: BigInt
  depositVolumeUsd_gt: BigInt
  depositVolumeUsd_lt: BigInt
  depositVolumeUsd_gte: BigInt
  depositVolumeUsd_lte: BigInt
  depositVolumeUsd_in: [BigInt!]
  depositVolumeUsd_not_in: [BigInt!]
  withdrawalVolumeUsd: BigInt
  withdrawalVolumeUsd_not: BigInt
  withdrawalVolumeUsd_gt: BigInt
  withdrawalVolumeUsd_lt: BigInt
  withdrawalVolumeUsd_gte: BigInt
  withdrawalVolumeUsd_lte: BigInt
  withdrawalVolumeUsd_in: [BigInt!]
  withdrawalVolumeUsd_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VolumeInfo_filter]
  or: [VolumeInfo_filter]
}

enum VolumeInfo_orderBy {
  id
  period
  volumeUsd
  marginVolumeUsd
  swapVolumeUsd
  depositVolumeUsd
  withdrawalVolumeUsd
  timestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}